//
// Copyright 2022 Han Xin, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: raw_file_system.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StringRequest) Reset() {
	*x = StringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRequest) ProtoMessage() {}

func (x *StringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringRequest.ProtoReflect.Descriptor instead.
func (*StringRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{0}
}

type StringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringResponse) Reset() {
	*x = StringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringResponse) ProtoMessage() {}

func (x *StringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringResponse.ProtoReflect.Descriptor instead.
func (*StringResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{1}
}

func (x *StringResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Name   string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LookupRequest) Reset() {
	*x = LookupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupRequest) ProtoMessage() {}

func (x *LookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupRequest.ProtoReflect.Descriptor instead.
func (*LookupRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{2}
}

func (x *LookupRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LookupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LookupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntryOut *EntryOut `protobuf:"bytes,2,opt,name=entry_out,json=entryOut,proto3" json:"entry_out,omitempty"`
}

func (x *LookupResponse) Reset() {
	*x = LookupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupResponse) ProtoMessage() {}

func (x *LookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupResponse.ProtoReflect.Descriptor instead.
func (*LookupResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{3}
}

func (x *LookupResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LookupResponse) GetEntryOut() *EntryOut {
	if x != nil {
		return x.EntryOut
	}
	return nil
}

type ForgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodeid  uint64 `protobuf:"varint,1,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Nlookup uint64 `protobuf:"varint,2,opt,name=nlookup,proto3" json:"nlookup,omitempty"`
}

func (x *ForgetRequest) Reset() {
	*x = ForgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgetRequest) ProtoMessage() {}

func (x *ForgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgetRequest.ProtoReflect.Descriptor instead.
func (*ForgetRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{4}
}

func (x *ForgetRequest) GetNodeid() uint64 {
	if x != nil {
		return x.Nodeid
	}
	return 0
}

func (x *ForgetRequest) GetNlookup() uint64 {
	if x != nil {
		return x.Nlookup
	}
	return 0
}

type GetAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetAttrRequest) Reset() {
	*x = GetAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttrRequest) ProtoMessage() {}

func (x *GetAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttrRequest.ProtoReflect.Descriptor instead.
func (*GetAttrRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{5}
}

func (x *GetAttrRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type GetAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AttrOut *AttrOut `protobuf:"bytes,2,opt,name=attr_out,json=attrOut,proto3" json:"attr_out,omitempty"`
}

func (x *GetAttrResponse) Reset() {
	*x = GetAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttrResponse) ProtoMessage() {}

func (x *GetAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttrResponse.ProtoReflect.Descriptor instead.
func (*GetAttrResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{6}
}

func (x *GetAttrResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAttrResponse) GetAttrOut() *AttrOut {
	if x != nil {
		return x.AttrOut
	}
	return nil
}

type SetAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Valid     uint32    `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	Padding   uint32    `protobuf:"varint,3,opt,name=padding,proto3" json:"padding,omitempty"`
	Fh        uint64    `protobuf:"varint,4,opt,name=fh,proto3" json:"fh,omitempty"`
	Size      uint64    `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	LockOwner uint64    `protobuf:"varint,6,opt,name=lock_owner,json=lockOwner,proto3" json:"lock_owner,omitempty"`
	Atime     uint64    `protobuf:"varint,7,opt,name=atime,proto3" json:"atime,omitempty"`
	Mtime     uint64    `protobuf:"varint,8,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Ctime     uint64    `protobuf:"varint,9,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Atimensec uint32    `protobuf:"varint,10,opt,name=atimensec,proto3" json:"atimensec,omitempty"`
	Mtimensec uint32    `protobuf:"varint,11,opt,name=mtimensec,proto3" json:"mtimensec,omitempty"`
	Ctimensec uint32    `protobuf:"varint,12,opt,name=ctimensec,proto3" json:"ctimensec,omitempty"`
	Mode      uint32    `protobuf:"varint,13,opt,name=mode,proto3" json:"mode,omitempty"`
	Unused4   uint32    `protobuf:"varint,14,opt,name=unused4,proto3" json:"unused4,omitempty"`
	Owner     *Owner    `protobuf:"bytes,15,opt,name=owner,proto3" json:"owner,omitempty"`
	Unused5   uint32    `protobuf:"varint,16,opt,name=unused5,proto3" json:"unused5,omitempty"`
}

func (x *SetAttrRequest) Reset() {
	*x = SetAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAttrRequest) ProtoMessage() {}

func (x *SetAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAttrRequest.ProtoReflect.Descriptor instead.
func (*SetAttrRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{7}
}

func (x *SetAttrRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetAttrRequest) GetValid() uint32 {
	if x != nil {
		return x.Valid
	}
	return 0
}

func (x *SetAttrRequest) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

func (x *SetAttrRequest) GetFh() uint64 {
	if x != nil {
		return x.Fh
	}
	return 0
}

func (x *SetAttrRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SetAttrRequest) GetLockOwner() uint64 {
	if x != nil {
		return x.LockOwner
	}
	return 0
}

func (x *SetAttrRequest) GetAtime() uint64 {
	if x != nil {
		return x.Atime
	}
	return 0
}

func (x *SetAttrRequest) GetMtime() uint64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *SetAttrRequest) GetCtime() uint64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *SetAttrRequest) GetAtimensec() uint32 {
	if x != nil {
		return x.Atimensec
	}
	return 0
}

func (x *SetAttrRequest) GetMtimensec() uint32 {
	if x != nil {
		return x.Mtimensec
	}
	return 0
}

func (x *SetAttrRequest) GetCtimensec() uint32 {
	if x != nil {
		return x.Ctimensec
	}
	return 0
}

func (x *SetAttrRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *SetAttrRequest) GetUnused4() uint32 {
	if x != nil {
		return x.Unused4
	}
	return 0
}

func (x *SetAttrRequest) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SetAttrRequest) GetUnused5() uint32 {
	if x != nil {
		return x.Unused5
	}
	return 0
}

type SetAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AttrOut *AttrOut `protobuf:"bytes,2,opt,name=attr_out,json=attrOut,proto3" json:"attr_out,omitempty"`
}

func (x *SetAttrResponse) Reset() {
	*x = SetAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAttrResponse) ProtoMessage() {}

func (x *SetAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAttrResponse.ProtoReflect.Descriptor instead.
func (*SetAttrResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{8}
}

func (x *SetAttrResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SetAttrResponse) GetAttrOut() *AttrOut {
	if x != nil {
		return x.AttrOut
	}
	return nil
}

type MknodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Name   string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mode   uint32    `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	Rdev   uint32    `protobuf:"varint,4,opt,name=rdev,proto3" json:"rdev,omitempty"`
	// for linux
	Umask uint32 `protobuf:"varint,5,opt,name=umask,proto3" json:"umask,omitempty"`
}

func (x *MknodRequest) Reset() {
	*x = MknodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MknodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MknodRequest) ProtoMessage() {}

func (x *MknodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MknodRequest.ProtoReflect.Descriptor instead.
func (*MknodRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{9}
}

func (x *MknodRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MknodRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MknodRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *MknodRequest) GetRdev() uint32 {
	if x != nil {
		return x.Rdev
	}
	return 0
}

func (x *MknodRequest) GetUmask() uint32 {
	if x != nil {
		return x.Umask
	}
	return 0
}

type MknodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntryOut *EntryOut `protobuf:"bytes,2,opt,name=entry_out,json=entryOut,proto3" json:"entry_out,omitempty"`
}

func (x *MknodResponse) Reset() {
	*x = MknodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MknodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MknodResponse) ProtoMessage() {}

func (x *MknodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MknodResponse.ProtoReflect.Descriptor instead.
func (*MknodResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{10}
}

func (x *MknodResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MknodResponse) GetEntryOut() *EntryOut {
	if x != nil {
		return x.EntryOut
	}
	return nil
}

type MkdirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Name   string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mode   uint32    `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	Umask  uint32    `protobuf:"varint,4,opt,name=umask,proto3" json:"umask,omitempty"`
}

func (x *MkdirRequest) Reset() {
	*x = MkdirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MkdirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MkdirRequest) ProtoMessage() {}

func (x *MkdirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MkdirRequest.ProtoReflect.Descriptor instead.
func (*MkdirRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{11}
}

func (x *MkdirRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MkdirRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MkdirRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *MkdirRequest) GetUmask() uint32 {
	if x != nil {
		return x.Umask
	}
	return 0
}

type MkdirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntryOut *EntryOut `protobuf:"bytes,2,opt,name=entry_out,json=entryOut,proto3" json:"entry_out,omitempty"`
}

func (x *MkdirResponse) Reset() {
	*x = MkdirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MkdirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MkdirResponse) ProtoMessage() {}

func (x *MkdirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MkdirResponse.ProtoReflect.Descriptor instead.
func (*MkdirResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{12}
}

func (x *MkdirResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MkdirResponse) GetEntryOut() *EntryOut {
	if x != nil {
		return x.EntryOut
	}
	return nil
}

type UnlinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Name   string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UnlinkRequest) Reset() {
	*x = UnlinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlinkRequest) ProtoMessage() {}

func (x *UnlinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlinkRequest.ProtoReflect.Descriptor instead.
func (*UnlinkRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{13}
}

func (x *UnlinkRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UnlinkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UnlinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UnlinkResponse) Reset() {
	*x = UnlinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlinkResponse) ProtoMessage() {}

func (x *UnlinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlinkResponse.ProtoReflect.Descriptor instead.
func (*UnlinkResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{14}
}

func (x *UnlinkResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RmdirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Name   string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RmdirRequest) Reset() {
	*x = RmdirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RmdirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RmdirRequest) ProtoMessage() {}

func (x *RmdirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RmdirRequest.ProtoReflect.Descriptor instead.
func (*RmdirRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{15}
}

func (x *RmdirRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RmdirRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RmdirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RmdirResponse) Reset() {
	*x = RmdirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RmdirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RmdirResponse) ProtoMessage() {}

func (x *RmdirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RmdirResponse.ProtoReflect.Descriptor instead.
func (*RmdirResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{16}
}

func (x *RmdirResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RenameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	OldName string    `protobuf:"bytes,2,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewName string    `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	Newdir  uint64    `protobuf:"varint,4,opt,name=newdir,proto3" json:"newdir,omitempty"`
	Flags   uint32    `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	Padding uint32    `protobuf:"varint,6,opt,name=padding,proto3" json:"padding,omitempty"`
}

func (x *RenameRequest) Reset() {
	*x = RenameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRequest) ProtoMessage() {}

func (x *RenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRequest.ProtoReflect.Descriptor instead.
func (*RenameRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{17}
}

func (x *RenameRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RenameRequest) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *RenameRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *RenameRequest) GetNewdir() uint64 {
	if x != nil {
		return x.Newdir
	}
	return 0
}

func (x *RenameRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RenameRequest) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

type RenameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RenameResponse) Reset() {
	*x = RenameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameResponse) ProtoMessage() {}

func (x *RenameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameResponse.ProtoReflect.Descriptor instead.
func (*RenameResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{18}
}

func (x *RenameResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type LinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Oldnodeid uint64    `protobuf:"varint,2,opt,name=oldnodeid,proto3" json:"oldnodeid,omitempty"`
	Filename  string    `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *LinkRequest) Reset() {
	*x = LinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkRequest) ProtoMessage() {}

func (x *LinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkRequest.ProtoReflect.Descriptor instead.
func (*LinkRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{19}
}

func (x *LinkRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LinkRequest) GetOldnodeid() uint64 {
	if x != nil {
		return x.Oldnodeid
	}
	return 0
}

func (x *LinkRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type LinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntryOut *EntryOut `protobuf:"bytes,2,opt,name=entry_out,json=entryOut,proto3" json:"entry_out,omitempty"`
}

func (x *LinkResponse) Reset() {
	*x = LinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkResponse) ProtoMessage() {}

func (x *LinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkResponse.ProtoReflect.Descriptor instead.
func (*LinkResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{20}
}

func (x *LinkResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LinkResponse) GetEntryOut() *EntryOut {
	if x != nil {
		return x.EntryOut
	}
	return nil
}

type SymlinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PointedTo string    `protobuf:"bytes,2,opt,name=pointed_to,json=pointedTo,proto3" json:"pointed_to,omitempty"`
	LinkName  string    `protobuf:"bytes,3,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
}

func (x *SymlinkRequest) Reset() {
	*x = SymlinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymlinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymlinkRequest) ProtoMessage() {}

func (x *SymlinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymlinkRequest.ProtoReflect.Descriptor instead.
func (*SymlinkRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{21}
}

func (x *SymlinkRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SymlinkRequest) GetPointedTo() string {
	if x != nil {
		return x.PointedTo
	}
	return ""
}

func (x *SymlinkRequest) GetLinkName() string {
	if x != nil {
		return x.LinkName
	}
	return ""
}

type SymlinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntryOut *EntryOut `protobuf:"bytes,2,opt,name=entry_out,json=entryOut,proto3" json:"entry_out,omitempty"`
}

func (x *SymlinkResponse) Reset() {
	*x = SymlinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymlinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymlinkResponse) ProtoMessage() {}

func (x *SymlinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymlinkResponse.ProtoReflect.Descriptor instead.
func (*SymlinkResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{22}
}

func (x *SymlinkResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SymlinkResponse) GetEntryOut() *EntryOut {
	if x != nil {
		return x.EntryOut
	}
	return nil
}

type ReadlinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ReadlinkRequest) Reset() {
	*x = ReadlinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadlinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadlinkRequest) ProtoMessage() {}

func (x *ReadlinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadlinkRequest.ProtoReflect.Descriptor instead.
func (*ReadlinkRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{23}
}

func (x *ReadlinkRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type ReadlinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Out    []byte  `protobuf:"bytes,2,opt,name=out,proto3" json:"out,omitempty"`
}

func (x *ReadlinkResponse) Reset() {
	*x = ReadlinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadlinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadlinkResponse) ProtoMessage() {}

func (x *ReadlinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadlinkResponse.ProtoReflect.Descriptor instead.
func (*ReadlinkResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{24}
}

func (x *ReadlinkResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReadlinkResponse) GetOut() []byte {
	if x != nil {
		return x.Out
	}
	return nil
}

type AccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Mask    uint32    `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
	Padding uint32    `protobuf:"varint,3,opt,name=padding,proto3" json:"padding,omitempty"`
}

func (x *AccessRequest) Reset() {
	*x = AccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequest) ProtoMessage() {}

func (x *AccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequest.ProtoReflect.Descriptor instead.
func (*AccessRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{25}
}

func (x *AccessRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AccessRequest) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *AccessRequest) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

type AccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AccessResponse) Reset() {
	*x = AccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessResponse) ProtoMessage() {}

func (x *AccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessResponse.ProtoReflect.Descriptor instead.
func (*AccessResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{26}
}

func (x *AccessResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetXAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Attr   string    `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
	Dest   []byte    `protobuf:"bytes,3,opt,name=dest,proto3" json:"dest,omitempty"`
}

func (x *GetXAttrRequest) Reset() {
	*x = GetXAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetXAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXAttrRequest) ProtoMessage() {}

func (x *GetXAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXAttrRequest.ProtoReflect.Descriptor instead.
func (*GetXAttrRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{27}
}

func (x *GetXAttrRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetXAttrRequest) GetAttr() string {
	if x != nil {
		return x.Attr
	}
	return ""
}

func (x *GetXAttrRequest) GetDest() []byte {
	if x != nil {
		return x.Dest
	}
	return nil
}

type GetXAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Size   uint32  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetXAttrResponse) Reset() {
	*x = GetXAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetXAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXAttrResponse) ProtoMessage() {}

func (x *GetXAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXAttrResponse.ProtoReflect.Descriptor instead.
func (*GetXAttrResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{28}
}

func (x *GetXAttrResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetXAttrResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListXAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Dest   []byte    `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest,omitempty"`
}

func (x *ListXAttrRequest) Reset() {
	*x = ListXAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXAttrRequest) ProtoMessage() {}

func (x *ListXAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXAttrRequest.ProtoReflect.Descriptor instead.
func (*ListXAttrRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{29}
}

func (x *ListXAttrRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListXAttrRequest) GetDest() []byte {
	if x != nil {
		return x.Dest
	}
	return nil
}

type ListXAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Size   uint32  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListXAttrResponse) Reset() {
	*x = ListXAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXAttrResponse) ProtoMessage() {}

func (x *ListXAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXAttrResponse.ProtoReflect.Descriptor instead.
func (*ListXAttrResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{30}
}

func (x *ListXAttrResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListXAttrResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SetXAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Attr     string    `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
	Data     []byte    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Size     uint32    `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Flags    uint32    `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	Position uint32    `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`
	Padding  uint32    `protobuf:"varint,7,opt,name=padding,proto3" json:"padding,omitempty"`
}

func (x *SetXAttrRequest) Reset() {
	*x = SetXAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetXAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetXAttrRequest) ProtoMessage() {}

func (x *SetXAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetXAttrRequest.ProtoReflect.Descriptor instead.
func (*SetXAttrRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{31}
}

func (x *SetXAttrRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetXAttrRequest) GetAttr() string {
	if x != nil {
		return x.Attr
	}
	return ""
}

func (x *SetXAttrRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SetXAttrRequest) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SetXAttrRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SetXAttrRequest) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SetXAttrRequest) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

type SetXAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetXAttrResponse) Reset() {
	*x = SetXAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetXAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetXAttrResponse) ProtoMessage() {}

func (x *SetXAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetXAttrResponse.ProtoReflect.Descriptor instead.
func (*SetXAttrResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{32}
}

func (x *SetXAttrResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RemoveXAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Attr   string    `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *RemoveXAttrRequest) Reset() {
	*x = RemoveXAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveXAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveXAttrRequest) ProtoMessage() {}

func (x *RemoveXAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveXAttrRequest.ProtoReflect.Descriptor instead.
func (*RemoveXAttrRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{33}
}

func (x *RemoveXAttrRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RemoveXAttrRequest) GetAttr() string {
	if x != nil {
		return x.Attr
	}
	return ""
}

type RemoveXAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RemoveXAttrResponse) Reset() {
	*x = RemoveXAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveXAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveXAttrResponse) ProtoMessage() {}

func (x *RemoveXAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveXAttrResponse.ProtoReflect.Descriptor instead.
func (*RemoveXAttrResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{34}
}

func (x *RemoveXAttrResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Name   string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Flags  uint32    `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Mode   uint32    `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// for linux
	Umask   uint32 `protobuf:"varint,5,opt,name=umask,proto3" json:"umask,omitempty"`
	Padding uint32 `protobuf:"varint,6,opt,name=padding,proto3" json:"padding,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{35}
}

func (x *CreateRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *CreateRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *CreateRequest) GetUmask() uint32 {
	if x != nil {
		return x.Umask
	}
	return 0
}

func (x *CreateRequest) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntryOut *EntryOut `protobuf:"bytes,2,opt,name=entry_out,json=entryOut,proto3" json:"entry_out,omitempty"`
	OpenOut  *OpenOut  `protobuf:"bytes,3,opt,name=open_out,json=openOut,proto3" json:"open_out,omitempty"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{36}
}

func (x *CreateResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateResponse) GetEntryOut() *EntryOut {
	if x != nil {
		return x.EntryOut
	}
	return nil
}

func (x *CreateResponse) GetOpenOut() *OpenOut {
	if x != nil {
		return x.OpenOut
	}
	return nil
}

type OpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenIn *OpenIn `protobuf:"bytes,1,opt,name=open_in,json=openIn,proto3" json:"open_in,omitempty"`
}

func (x *OpenRequest) Reset() {
	*x = OpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenRequest) ProtoMessage() {}

func (x *OpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenRequest.ProtoReflect.Descriptor instead.
func (*OpenRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{37}
}

func (x *OpenRequest) GetOpenIn() *OpenIn {
	if x != nil {
		return x.OpenIn
	}
	return nil
}

type OpenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	OpenOut *OpenOut `protobuf:"bytes,2,opt,name=open_out,json=openOut,proto3" json:"open_out,omitempty"`
}

func (x *OpenResponse) Reset() {
	*x = OpenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenResponse) ProtoMessage() {}

func (x *OpenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenResponse.ProtoReflect.Descriptor instead.
func (*OpenResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{38}
}

func (x *OpenResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OpenResponse) GetOpenOut() *OpenOut {
	if x != nil {
		return x.OpenOut
	}
	return nil
}

type ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadIn *ReadIn `protobuf:"bytes,1,opt,name=read_in,json=readIn,proto3" json:"read_in,omitempty"`
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{39}
}

func (x *ReadRequest) GetReadIn() *ReadIn {
	if x != nil {
		return x.ReadIn
	}
	return nil
}

type ReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Buffer []byte  `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"`
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{40}
}

func (x *ReadResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReadResponse) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type LSeekRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Fh      uint64    `protobuf:"varint,2,opt,name=fh,proto3" json:"fh,omitempty"`
	Offset  uint64    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Whence  uint32    `protobuf:"varint,4,opt,name=whence,proto3" json:"whence,omitempty"`
	Padding uint32    `protobuf:"varint,5,opt,name=padding,proto3" json:"padding,omitempty"`
}

func (x *LSeekRequest) Reset() {
	*x = LSeekRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSeekRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSeekRequest) ProtoMessage() {}

func (x *LSeekRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSeekRequest.ProtoReflect.Descriptor instead.
func (*LSeekRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{41}
}

func (x *LSeekRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LSeekRequest) GetFh() uint64 {
	if x != nil {
		return x.Fh
	}
	return 0
}

func (x *LSeekRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *LSeekRequest) GetWhence() uint32 {
	if x != nil {
		return x.Whence
	}
	return 0
}

func (x *LSeekRequest) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

type LSeekResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Offset uint64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *LSeekResponse) Reset() {
	*x = LSeekResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSeekResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSeekResponse) ProtoMessage() {}

func (x *LSeekResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSeekResponse.ProtoReflect.Descriptor instead.
func (*LSeekResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{42}
}

func (x *LSeekResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LSeekResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type LkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Fh      uint64    `protobuf:"varint,2,opt,name=fh,proto3" json:"fh,omitempty"`
	Owner   uint64    `protobuf:"varint,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Lk      *FileLock `protobuf:"bytes,4,opt,name=lk,proto3" json:"lk,omitempty"`
	LkFlags uint32    `protobuf:"varint,5,opt,name=lk_flags,json=lkFlags,proto3" json:"lk_flags,omitempty"`
	Padding uint32    `protobuf:"varint,6,opt,name=padding,proto3" json:"padding,omitempty"`
}

func (x *LkRequest) Reset() {
	*x = LkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LkRequest) ProtoMessage() {}

func (x *LkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LkRequest.ProtoReflect.Descriptor instead.
func (*LkRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{43}
}

func (x *LkRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LkRequest) GetFh() uint64 {
	if x != nil {
		return x.Fh
	}
	return 0
}

func (x *LkRequest) GetOwner() uint64 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *LkRequest) GetLk() *FileLock {
	if x != nil {
		return x.Lk
	}
	return nil
}

func (x *LkRequest) GetLkFlags() uint32 {
	if x != nil {
		return x.LkFlags
	}
	return 0
}

func (x *LkRequest) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

type GetLkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Lk     *FileLock `protobuf:"bytes,2,opt,name=lk,proto3" json:"lk,omitempty"`
}

func (x *GetLkResponse) Reset() {
	*x = GetLkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLkResponse) ProtoMessage() {}

func (x *GetLkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLkResponse.ProtoReflect.Descriptor instead.
func (*GetLkResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{44}
}

func (x *GetLkResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetLkResponse) GetLk() *FileLock {
	if x != nil {
		return x.Lk
	}
	return nil
}

type SetLkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetLkResponse) Reset() {
	*x = SetLkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLkResponse) ProtoMessage() {}

func (x *SetLkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLkResponse.ProtoReflect.Descriptor instead.
func (*SetLkResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{45}
}

func (x *SetLkResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Fh           uint64    `protobuf:"varint,2,opt,name=fh,proto3" json:"fh,omitempty"`
	Flags        uint32    `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	ReleaseFlags uint32    `protobuf:"varint,4,opt,name=release_flags,json=releaseFlags,proto3" json:"release_flags,omitempty"`
	LockOwner    uint64    `protobuf:"varint,5,opt,name=lock_owner,json=lockOwner,proto3" json:"lock_owner,omitempty"`
}

func (x *ReleaseRequest) Reset() {
	*x = ReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseRequest) ProtoMessage() {}

func (x *ReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseRequest.ProtoReflect.Descriptor instead.
func (*ReleaseRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{46}
}

func (x *ReleaseRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ReleaseRequest) GetFh() uint64 {
	if x != nil {
		return x.Fh
	}
	return 0
}

func (x *ReleaseRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ReleaseRequest) GetReleaseFlags() uint32 {
	if x != nil {
		return x.ReleaseFlags
	}
	return 0
}

func (x *ReleaseRequest) GetLockOwner() uint64 {
	if x != nil {
		return x.LockOwner
	}
	return 0
}

type WriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Fh         uint64    `protobuf:"varint,2,opt,name=fh,proto3" json:"fh,omitempty"`
	Offset     uint64    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Data       []byte    `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Size       uint32    `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	WriteFlags uint32    `protobuf:"varint,6,opt,name=write_flags,json=writeFlags,proto3" json:"write_flags,omitempty"`
	LockOwner  uint64    `protobuf:"varint,7,opt,name=lock_owner,json=lockOwner,proto3" json:"lock_owner,omitempty"`
	Flags      uint32    `protobuf:"varint,8,opt,name=flags,proto3" json:"flags,omitempty"`
	Padding    uint32    `protobuf:"varint,9,opt,name=padding,proto3" json:"padding,omitempty"`
}

func (x *WriteRequest) Reset() {
	*x = WriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest) ProtoMessage() {}

func (x *WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest.ProtoReflect.Descriptor instead.
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{47}
}

func (x *WriteRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WriteRequest) GetFh() uint64 {
	if x != nil {
		return x.Fh
	}
	return 0
}

func (x *WriteRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WriteRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WriteRequest) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *WriteRequest) GetWriteFlags() uint32 {
	if x != nil {
		return x.WriteFlags
	}
	return 0
}

func (x *WriteRequest) GetLockOwner() uint64 {
	if x != nil {
		return x.LockOwner
	}
	return 0
}

func (x *WriteRequest) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *WriteRequest) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

type WriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Written uint32  `protobuf:"varint,2,opt,name=written,proto3" json:"written,omitempty"`
}

func (x *WriteResponse) Reset() {
	*x = WriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse) ProtoMessage() {}

func (x *WriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse.ProtoReflect.Descriptor instead.
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{48}
}

func (x *WriteResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WriteResponse) GetWritten() uint32 {
	if x != nil {
		return x.Written
	}
	return 0
}

type CopyFileRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	FhIn      uint64    `protobuf:"varint,2,opt,name=fh_in,json=fhIn,proto3" json:"fh_in,omitempty"`
	OffIn     uint64    `protobuf:"varint,3,opt,name=off_in,json=offIn,proto3" json:"off_in,omitempty"`
	NodeIdOut uint64    `protobuf:"varint,4,opt,name=node_id_out,json=nodeIdOut,proto3" json:"node_id_out,omitempty"`
	FhOut     uint64    `protobuf:"varint,5,opt,name=fh_out,json=fhOut,proto3" json:"fh_out,omitempty"`
	OffOut    uint64    `protobuf:"varint,6,opt,name=off_out,json=offOut,proto3" json:"off_out,omitempty"`
	Len       uint64    `protobuf:"varint,7,opt,name=len,proto3" json:"len,omitempty"`
	Flags     uint64    `protobuf:"varint,8,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *CopyFileRangeRequest) Reset() {
	*x = CopyFileRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFileRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFileRangeRequest) ProtoMessage() {}

func (x *CopyFileRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFileRangeRequest.ProtoReflect.Descriptor instead.
func (*CopyFileRangeRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{49}
}

func (x *CopyFileRangeRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CopyFileRangeRequest) GetFhIn() uint64 {
	if x != nil {
		return x.FhIn
	}
	return 0
}

func (x *CopyFileRangeRequest) GetOffIn() uint64 {
	if x != nil {
		return x.OffIn
	}
	return 0
}

func (x *CopyFileRangeRequest) GetNodeIdOut() uint64 {
	if x != nil {
		return x.NodeIdOut
	}
	return 0
}

func (x *CopyFileRangeRequest) GetFhOut() uint64 {
	if x != nil {
		return x.FhOut
	}
	return 0
}

func (x *CopyFileRangeRequest) GetOffOut() uint64 {
	if x != nil {
		return x.OffOut
	}
	return 0
}

func (x *CopyFileRangeRequest) GetLen() uint64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *CopyFileRangeRequest) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type CopyFileRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Written uint32  `protobuf:"varint,2,opt,name=written,proto3" json:"written,omitempty"`
}

func (x *CopyFileRangeResponse) Reset() {
	*x = CopyFileRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFileRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFileRangeResponse) ProtoMessage() {}

func (x *CopyFileRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFileRangeResponse.ProtoReflect.Descriptor instead.
func (*CopyFileRangeResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{50}
}

func (x *CopyFileRangeResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CopyFileRangeResponse) GetWritten() uint32 {
	if x != nil {
		return x.Written
	}
	return 0
}

type FlushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Fh        uint64    `protobuf:"varint,2,opt,name=fh,proto3" json:"fh,omitempty"`
	Unused    uint32    `protobuf:"varint,3,opt,name=unused,proto3" json:"unused,omitempty"`
	Padding   uint32    `protobuf:"varint,4,opt,name=padding,proto3" json:"padding,omitempty"`
	LockOwner uint64    `protobuf:"varint,5,opt,name=lock_owner,json=lockOwner,proto3" json:"lock_owner,omitempty"`
}

func (x *FlushRequest) Reset() {
	*x = FlushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushRequest) ProtoMessage() {}

func (x *FlushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushRequest.ProtoReflect.Descriptor instead.
func (*FlushRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{51}
}

func (x *FlushRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FlushRequest) GetFh() uint64 {
	if x != nil {
		return x.Fh
	}
	return 0
}

func (x *FlushRequest) GetUnused() uint32 {
	if x != nil {
		return x.Unused
	}
	return 0
}

func (x *FlushRequest) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

func (x *FlushRequest) GetLockOwner() uint64 {
	if x != nil {
		return x.LockOwner
	}
	return 0
}

type FlushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FlushResponse) Reset() {
	*x = FlushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushResponse) ProtoMessage() {}

func (x *FlushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushResponse.ProtoReflect.Descriptor instead.
func (*FlushResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{52}
}

func (x *FlushResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type FsyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Fh         uint64    `protobuf:"varint,2,opt,name=fh,proto3" json:"fh,omitempty"`
	FsyncFlags uint32    `protobuf:"varint,3,opt,name=fsync_flags,json=fsyncFlags,proto3" json:"fsync_flags,omitempty"`
	Padding    uint32    `protobuf:"varint,4,opt,name=padding,proto3" json:"padding,omitempty"`
}

func (x *FsyncRequest) Reset() {
	*x = FsyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FsyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FsyncRequest) ProtoMessage() {}

func (x *FsyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FsyncRequest.ProtoReflect.Descriptor instead.
func (*FsyncRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{53}
}

func (x *FsyncRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FsyncRequest) GetFh() uint64 {
	if x != nil {
		return x.Fh
	}
	return 0
}

func (x *FsyncRequest) GetFsyncFlags() uint32 {
	if x != nil {
		return x.FsyncFlags
	}
	return 0
}

func (x *FsyncRequest) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

type FsyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FsyncResponse) Reset() {
	*x = FsyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FsyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FsyncResponse) ProtoMessage() {}

func (x *FsyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FsyncResponse.ProtoReflect.Descriptor instead.
func (*FsyncResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{54}
}

func (x *FsyncResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type FallocateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *InHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Fh      uint64    `protobuf:"varint,2,opt,name=fh,proto3" json:"fh,omitempty"`
	Offset  uint64    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Length  uint64    `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Mode    uint32    `protobuf:"varint,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Padding uint32    `protobuf:"varint,6,opt,name=padding,proto3" json:"padding,omitempty"`
}

func (x *FallocateRequest) Reset() {
	*x = FallocateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallocateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallocateRequest) ProtoMessage() {}

func (x *FallocateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallocateRequest.ProtoReflect.Descriptor instead.
func (*FallocateRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{55}
}

func (x *FallocateRequest) GetHeader() *InHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FallocateRequest) GetFh() uint64 {
	if x != nil {
		return x.Fh
	}
	return 0
}

func (x *FallocateRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FallocateRequest) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *FallocateRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FallocateRequest) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

type FallocateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FallocateResponse) Reset() {
	*x = FallocateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallocateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallocateResponse) ProtoMessage() {}

func (x *FallocateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallocateResponse.ProtoReflect.Descriptor instead.
func (*FallocateResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{56}
}

func (x *FallocateResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type OpenDirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenIn *OpenIn `protobuf:"bytes,1,opt,name=open_in,json=openIn,proto3" json:"open_in,omitempty"`
}

func (x *OpenDirRequest) Reset() {
	*x = OpenDirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenDirRequest) ProtoMessage() {}

func (x *OpenDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenDirRequest.ProtoReflect.Descriptor instead.
func (*OpenDirRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{57}
}

func (x *OpenDirRequest) GetOpenIn() *OpenIn {
	if x != nil {
		return x.OpenIn
	}
	return nil
}

type OpenDirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	OpenOut *OpenOut `protobuf:"bytes,2,opt,name=open_out,json=openOut,proto3" json:"open_out,omitempty"`
}

func (x *OpenDirResponse) Reset() {
	*x = OpenDirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenDirResponse) ProtoMessage() {}

func (x *OpenDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenDirResponse.ProtoReflect.Descriptor instead.
func (*OpenDirResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{58}
}

func (x *OpenDirResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OpenDirResponse) GetOpenOut() *OpenOut {
	if x != nil {
		return x.OpenOut
	}
	return nil
}

type ReadDirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadIn *ReadIn `protobuf:"bytes,1,opt,name=read_in,json=readIn,proto3" json:"read_in,omitempty"`
}

func (x *ReadDirRequest) Reset() {
	*x = ReadDirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirRequest) ProtoMessage() {}

func (x *ReadDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirRequest.ProtoReflect.Descriptor instead.
func (*ReadDirRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{59}
}

func (x *ReadDirRequest) GetReadIn() *ReadIn {
	if x != nil {
		return x.ReadIn
	}
	return nil
}

type ReadDirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Entries []*DirEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ReadDirResponse) Reset() {
	*x = ReadDirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirResponse) ProtoMessage() {}

func (x *ReadDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirResponse.ProtoReflect.Descriptor instead.
func (*ReadDirResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{60}
}

func (x *ReadDirResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReadDirResponse) GetEntries() []*DirEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type StatfsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *InHeader `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *StatfsRequest) Reset() {
	*x = StatfsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatfsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatfsRequest) ProtoMessage() {}

func (x *StatfsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatfsRequest.ProtoReflect.Descriptor instead.
func (*StatfsRequest) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{61}
}

func (x *StatfsRequest) GetInput() *InHeader {
	if x != nil {
		return x.Input
	}
	return nil
}

type StatfsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Blocks  uint64   `protobuf:"varint,2,opt,name=blocks,proto3" json:"blocks,omitempty"`
	Bfree   uint64   `protobuf:"varint,3,opt,name=bfree,proto3" json:"bfree,omitempty"`
	Bavail  uint64   `protobuf:"varint,4,opt,name=bavail,proto3" json:"bavail,omitempty"`
	Files   uint64   `protobuf:"varint,5,opt,name=files,proto3" json:"files,omitempty"`
	Ffree   uint64   `protobuf:"varint,6,opt,name=ffree,proto3" json:"ffree,omitempty"`
	Bsize   uint32   `protobuf:"varint,7,opt,name=bsize,proto3" json:"bsize,omitempty"`
	NameLen uint32   `protobuf:"varint,8,opt,name=nameLen,proto3" json:"nameLen,omitempty"`
	Frsize  uint32   `protobuf:"varint,9,opt,name=frsize,proto3" json:"frsize,omitempty"`
	Padding uint32   `protobuf:"varint,10,opt,name=padding,proto3" json:"padding,omitempty"`
	Spare   []uint32 `protobuf:"varint,11,rep,packed,name=spare,proto3" json:"spare,omitempty"`
}

func (x *StatfsResponse) Reset() {
	*x = StatfsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raw_file_system_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatfsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatfsResponse) ProtoMessage() {}

func (x *StatfsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raw_file_system_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatfsResponse.ProtoReflect.Descriptor instead.
func (*StatfsResponse) Descriptor() ([]byte, []int) {
	return file_raw_file_system_proto_rawDescGZIP(), []int{62}
}

func (x *StatfsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StatfsResponse) GetBlocks() uint64 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *StatfsResponse) GetBfree() uint64 {
	if x != nil {
		return x.Bfree
	}
	return 0
}

func (x *StatfsResponse) GetBavail() uint64 {
	if x != nil {
		return x.Bavail
	}
	return 0
}

func (x *StatfsResponse) GetFiles() uint64 {
	if x != nil {
		return x.Files
	}
	return 0
}

func (x *StatfsResponse) GetFfree() uint64 {
	if x != nil {
		return x.Ffree
	}
	return 0
}

func (x *StatfsResponse) GetBsize() uint32 {
	if x != nil {
		return x.Bsize
	}
	return 0
}

func (x *StatfsResponse) GetNameLen() uint32 {
	if x != nil {
		return x.NameLen
	}
	return 0
}

func (x *StatfsResponse) GetFrsize() uint32 {
	if x != nil {
		return x.Frsize
	}
	return 0
}

func (x *StatfsResponse) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

func (x *StatfsResponse) GetSpare() []uint32 {
	if x != nil {
		return x.Spare
	}
	return nil
}

var File_raw_file_system_proto protoreflect.FileDescriptor

var file_raw_file_system_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x49, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x0e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x29, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f,
	0x75, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x22, 0x41, 0x0a, 0x0d,
	0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x22,
	0x36, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x4f, 0x75, 0x74, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x4f, 0x75, 0x74, 0x22, 0xae, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x66, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x66, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x65,
	0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x65, 0x63, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x65, 0x63, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x65, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x34, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x34, 0x12, 0x1f, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x35, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x35, 0x22, 0x5d, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x4f, 0x75, 0x74, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x4d, 0x6b, 0x6e, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x64, 0x65, 0x76, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x64, 0x65, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x6d, 0x61, 0x73, 0x6b, 0x22,
	0x5e, 0x0a, 0x0d, 0x4d, 0x6b, 0x6e, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x4f, 0x75, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x22,
	0x72, 0x0a, 0x0c, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x6d,
	0x61, 0x73, 0x6b, 0x22, 0x5e, 0x0a, 0x0d, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x4f, 0x75, 0x74, 0x22, 0x49, 0x0a, 0x0d, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34,
	0x0a, 0x0e, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x0c, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33,
	0x0a, 0x0d, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x64, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x34, 0x0a, 0x0e, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x6d, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x6e, 0x6f, 0x64, 0x65,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d,
	0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4f, 0x75, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x22, 0x72, 0x0a,
	0x0e, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x60, 0x0a, 0x0f, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x4f, 0x75, 0x74, 0x22, 0x37, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x10,
	0x52, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x22, 0x63, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x34, 0x0a, 0x0e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74,
	0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x74, 0x22, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x4c,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x53, 0x65,
	0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x36, 0x0a, 0x10, 0x53,
	0x65, 0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x58, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x22, 0x39, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x58, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa3,
	0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x22, 0x32,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x49, 0x6e, 0x22, 0x5a, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x22, 0x32,
	0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x6e, 0x22, 0x4a, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x8e,
	0x01, 0x0a, 0x0c, 0x4c, 0x53, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x66, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x68, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77,
	0x68, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22,
	0x4b, 0x0a, 0x0d, 0x4c, 0x53, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xaa, 0x01, 0x0a,
	0x09, 0x4c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x66, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x66, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x02, 0x6c, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x02, 0x6c, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x51, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x4c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x02, 0x6c, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x02, 0x6c, 0x6b, 0x22, 0x33, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x4c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x66, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x22, 0xf4, 0x01, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x66,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x66, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x4d, 0x0a, 0x0d, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x43,
	0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x68, 0x5f,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x68, 0x49, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6f, 0x66, 0x66, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x68, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x66, 0x66, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x4f, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x55, 0x0a,
	0x15, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x66,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x66, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x33, 0x0a, 0x0d,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x7f, 0x0a, 0x0c, 0x46, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x66, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x73,
	0x79, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x22, 0x33, 0x0a, 0x0d, 0x46, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x46, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x66, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x22, 0x37, 0x0a, 0x11, 0x46, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x35, 0x0a, 0x0e, 0x4f, 0x70, 0x65,
	0x6e, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x07, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e,
	0x22, 0x5d, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x75, 0x74, 0x22,
	0x35, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x22, 0x5d, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x66, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x74, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x66, 0x72,
	0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x66, 0x72, 0x65, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x62, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x66, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x66,
	0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x62, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x72, 0x65, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x61, 0x72, 0x65, 0x32, 0xad, 0x0f, 0x0a, 0x0d,
	0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x31, 0x0a,
	0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x31, 0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x12, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x05, 0x4d, 0x6b, 0x6e, 0x6f, 0x64, 0x12,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6b, 0x6e, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6b, 0x6e, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x05, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x12,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x05, 0x52, 0x6d, 0x64,
	0x69, 0x72, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x04,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x07, 0x53, 0x79, 0x6d,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79,
	0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x12, 0x13, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x58, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x58, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b,
	0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x04, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x4c, 0x53,
	0x65, 0x65, 0x6b, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x53, 0x65, 0x65, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x53, 0x65, 0x65, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x05, 0x47, 0x65,
	0x74, 0x4c, 0x6b, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x4c, 0x6b,
	0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x4c, 0x6b, 0x77, 0x12, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x05, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x43,
	0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x05, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x10, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x05, 0x46, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x10, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x46, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x34, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x69, 0x72, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72,
	0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3a, 0x0a,
	0x0b, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x12, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x08, 0x46, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x69,
	0x72, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x46, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x66, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x66,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_raw_file_system_proto_rawDescOnce sync.Once
	file_raw_file_system_proto_rawDescData = file_raw_file_system_proto_rawDesc
)

func file_raw_file_system_proto_rawDescGZIP() []byte {
	file_raw_file_system_proto_rawDescOnce.Do(func() {
		file_raw_file_system_proto_rawDescData = protoimpl.X.CompressGZIP(file_raw_file_system_proto_rawDescData)
	})
	return file_raw_file_system_proto_rawDescData
}

var file_raw_file_system_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_raw_file_system_proto_goTypes = []interface{}{
	(*StringRequest)(nil),         // 0: pb.StringRequest
	(*StringResponse)(nil),        // 1: pb.StringResponse
	(*LookupRequest)(nil),         // 2: pb.LookupRequest
	(*LookupResponse)(nil),        // 3: pb.LookupResponse
	(*ForgetRequest)(nil),         // 4: pb.ForgetRequest
	(*GetAttrRequest)(nil),        // 5: pb.GetAttrRequest
	(*GetAttrResponse)(nil),       // 6: pb.GetAttrResponse
	(*SetAttrRequest)(nil),        // 7: pb.SetAttrRequest
	(*SetAttrResponse)(nil),       // 8: pb.SetAttrResponse
	(*MknodRequest)(nil),          // 9: pb.MknodRequest
	(*MknodResponse)(nil),         // 10: pb.MknodResponse
	(*MkdirRequest)(nil),          // 11: pb.MkdirRequest
	(*MkdirResponse)(nil),         // 12: pb.MkdirResponse
	(*UnlinkRequest)(nil),         // 13: pb.UnlinkRequest
	(*UnlinkResponse)(nil),        // 14: pb.UnlinkResponse
	(*RmdirRequest)(nil),          // 15: pb.RmdirRequest
	(*RmdirResponse)(nil),         // 16: pb.RmdirResponse
	(*RenameRequest)(nil),         // 17: pb.RenameRequest
	(*RenameResponse)(nil),        // 18: pb.RenameResponse
	(*LinkRequest)(nil),           // 19: pb.LinkRequest
	(*LinkResponse)(nil),          // 20: pb.LinkResponse
	(*SymlinkRequest)(nil),        // 21: pb.SymlinkRequest
	(*SymlinkResponse)(nil),       // 22: pb.SymlinkResponse
	(*ReadlinkRequest)(nil),       // 23: pb.ReadlinkRequest
	(*ReadlinkResponse)(nil),      // 24: pb.ReadlinkResponse
	(*AccessRequest)(nil),         // 25: pb.AccessRequest
	(*AccessResponse)(nil),        // 26: pb.AccessResponse
	(*GetXAttrRequest)(nil),       // 27: pb.GetXAttrRequest
	(*GetXAttrResponse)(nil),      // 28: pb.GetXAttrResponse
	(*ListXAttrRequest)(nil),      // 29: pb.ListXAttrRequest
	(*ListXAttrResponse)(nil),     // 30: pb.ListXAttrResponse
	(*SetXAttrRequest)(nil),       // 31: pb.SetXAttrRequest
	(*SetXAttrResponse)(nil),      // 32: pb.SetXAttrResponse
	(*RemoveXAttrRequest)(nil),    // 33: pb.RemoveXAttrRequest
	(*RemoveXAttrResponse)(nil),   // 34: pb.RemoveXAttrResponse
	(*CreateRequest)(nil),         // 35: pb.CreateRequest
	(*CreateResponse)(nil),        // 36: pb.CreateResponse
	(*OpenRequest)(nil),           // 37: pb.OpenRequest
	(*OpenResponse)(nil),          // 38: pb.OpenResponse
	(*ReadRequest)(nil),           // 39: pb.ReadRequest
	(*ReadResponse)(nil),          // 40: pb.ReadResponse
	(*LSeekRequest)(nil),          // 41: pb.LSeekRequest
	(*LSeekResponse)(nil),         // 42: pb.LSeekResponse
	(*LkRequest)(nil),             // 43: pb.LkRequest
	(*GetLkResponse)(nil),         // 44: pb.GetLkResponse
	(*SetLkResponse)(nil),         // 45: pb.SetLkResponse
	(*ReleaseRequest)(nil),        // 46: pb.ReleaseRequest
	(*WriteRequest)(nil),          // 47: pb.WriteRequest
	(*WriteResponse)(nil),         // 48: pb.WriteResponse
	(*CopyFileRangeRequest)(nil),  // 49: pb.CopyFileRangeRequest
	(*CopyFileRangeResponse)(nil), // 50: pb.CopyFileRangeResponse
	(*FlushRequest)(nil),          // 51: pb.FlushRequest
	(*FlushResponse)(nil),         // 52: pb.FlushResponse
	(*FsyncRequest)(nil),          // 53: pb.FsyncRequest
	(*FsyncResponse)(nil),         // 54: pb.FsyncResponse
	(*FallocateRequest)(nil),      // 55: pb.FallocateRequest
	(*FallocateResponse)(nil),     // 56: pb.FallocateResponse
	(*OpenDirRequest)(nil),        // 57: pb.OpenDirRequest
	(*OpenDirResponse)(nil),       // 58: pb.OpenDirResponse
	(*ReadDirRequest)(nil),        // 59: pb.ReadDirRequest
	(*ReadDirResponse)(nil),       // 60: pb.ReadDirResponse
	(*StatfsRequest)(nil),         // 61: pb.StatfsRequest
	(*StatfsResponse)(nil),        // 62: pb.StatfsResponse
	(*InHeader)(nil),              // 63: pb.InHeader
	(*Status)(nil),                // 64: pb.Status
	(*EntryOut)(nil),              // 65: pb.EntryOut
	(*AttrOut)(nil),               // 66: pb.AttrOut
	(*Owner)(nil),                 // 67: pb.Owner
	(*OpenOut)(nil),               // 68: pb.OpenOut
	(*OpenIn)(nil),                // 69: pb.OpenIn
	(*ReadIn)(nil),                // 70: pb.ReadIn
	(*FileLock)(nil),              // 71: pb.FileLock
	(*DirEntry)(nil),              // 72: pb.DirEntry
	(*emptypb.Empty)(nil),         // 73: google.protobuf.Empty
}
var file_raw_file_system_proto_depIdxs = []int32{
	63,  // 0: pb.LookupRequest.header:type_name -> pb.InHeader
	64,  // 1: pb.LookupResponse.status:type_name -> pb.Status
	65,  // 2: pb.LookupResponse.entry_out:type_name -> pb.EntryOut
	63,  // 3: pb.GetAttrRequest.header:type_name -> pb.InHeader
	64,  // 4: pb.GetAttrResponse.status:type_name -> pb.Status
	66,  // 5: pb.GetAttrResponse.attr_out:type_name -> pb.AttrOut
	63,  // 6: pb.SetAttrRequest.header:type_name -> pb.InHeader
	67,  // 7: pb.SetAttrRequest.owner:type_name -> pb.Owner
	64,  // 8: pb.SetAttrResponse.status:type_name -> pb.Status
	66,  // 9: pb.SetAttrResponse.attr_out:type_name -> pb.AttrOut
	63,  // 10: pb.MknodRequest.header:type_name -> pb.InHeader
	64,  // 11: pb.MknodResponse.status:type_name -> pb.Status
	65,  // 12: pb.MknodResponse.entry_out:type_name -> pb.EntryOut
	63,  // 13: pb.MkdirRequest.header:type_name -> pb.InHeader
	64,  // 14: pb.MkdirResponse.status:type_name -> pb.Status
	65,  // 15: pb.MkdirResponse.entry_out:type_name -> pb.EntryOut
	63,  // 16: pb.UnlinkRequest.header:type_name -> pb.InHeader
	64,  // 17: pb.UnlinkResponse.status:type_name -> pb.Status
	63,  // 18: pb.RmdirRequest.header:type_name -> pb.InHeader
	64,  // 19: pb.RmdirResponse.status:type_name -> pb.Status
	63,  // 20: pb.RenameRequest.header:type_name -> pb.InHeader
	64,  // 21: pb.RenameResponse.status:type_name -> pb.Status
	63,  // 22: pb.LinkRequest.header:type_name -> pb.InHeader
	64,  // 23: pb.LinkResponse.status:type_name -> pb.Status
	65,  // 24: pb.LinkResponse.entry_out:type_name -> pb.EntryOut
	63,  // 25: pb.SymlinkRequest.header:type_name -> pb.InHeader
	64,  // 26: pb.SymlinkResponse.status:type_name -> pb.Status
	65,  // 27: pb.SymlinkResponse.entry_out:type_name -> pb.EntryOut
	63,  // 28: pb.ReadlinkRequest.header:type_name -> pb.InHeader
	64,  // 29: pb.ReadlinkResponse.status:type_name -> pb.Status
	63,  // 30: pb.AccessRequest.header:type_name -> pb.InHeader
	64,  // 31: pb.AccessResponse.status:type_name -> pb.Status
	63,  // 32: pb.GetXAttrRequest.header:type_name -> pb.InHeader
	64,  // 33: pb.GetXAttrResponse.status:type_name -> pb.Status
	63,  // 34: pb.ListXAttrRequest.header:type_name -> pb.InHeader
	64,  // 35: pb.ListXAttrResponse.status:type_name -> pb.Status
	63,  // 36: pb.SetXAttrRequest.header:type_name -> pb.InHeader
	64,  // 37: pb.SetXAttrResponse.status:type_name -> pb.Status
	63,  // 38: pb.RemoveXAttrRequest.header:type_name -> pb.InHeader
	64,  // 39: pb.RemoveXAttrResponse.status:type_name -> pb.Status
	63,  // 40: pb.CreateRequest.header:type_name -> pb.InHeader
	64,  // 41: pb.CreateResponse.status:type_name -> pb.Status
	65,  // 42: pb.CreateResponse.entry_out:type_name -> pb.EntryOut
	68,  // 43: pb.CreateResponse.open_out:type_name -> pb.OpenOut
	69,  // 44: pb.OpenRequest.open_in:type_name -> pb.OpenIn
	64,  // 45: pb.OpenResponse.status:type_name -> pb.Status
	68,  // 46: pb.OpenResponse.open_out:type_name -> pb.OpenOut
	70,  // 47: pb.ReadRequest.read_in:type_name -> pb.ReadIn
	64,  // 48: pb.ReadResponse.status:type_name -> pb.Status
	63,  // 49: pb.LSeekRequest.header:type_name -> pb.InHeader
	64,  // 50: pb.LSeekResponse.status:type_name -> pb.Status
	63,  // 51: pb.LkRequest.header:type_name -> pb.InHeader
	71,  // 52: pb.LkRequest.lk:type_name -> pb.FileLock
	64,  // 53: pb.GetLkResponse.status:type_name -> pb.Status
	71,  // 54: pb.GetLkResponse.lk:type_name -> pb.FileLock
	64,  // 55: pb.SetLkResponse.status:type_name -> pb.Status
	63,  // 56: pb.ReleaseRequest.header:type_name -> pb.InHeader
	63,  // 57: pb.WriteRequest.header:type_name -> pb.InHeader
	64,  // 58: pb.WriteResponse.status:type_name -> pb.Status
	63,  // 59: pb.CopyFileRangeRequest.header:type_name -> pb.InHeader
	64,  // 60: pb.CopyFileRangeResponse.status:type_name -> pb.Status
	63,  // 61: pb.FlushRequest.header:type_name -> pb.InHeader
	64,  // 62: pb.FlushResponse.status:type_name -> pb.Status
	63,  // 63: pb.FsyncRequest.header:type_name -> pb.InHeader
	64,  // 64: pb.FsyncResponse.status:type_name -> pb.Status
	63,  // 65: pb.FallocateRequest.header:type_name -> pb.InHeader
	64,  // 66: pb.FallocateResponse.status:type_name -> pb.Status
	69,  // 67: pb.OpenDirRequest.open_in:type_name -> pb.OpenIn
	64,  // 68: pb.OpenDirResponse.status:type_name -> pb.Status
	68,  // 69: pb.OpenDirResponse.open_out:type_name -> pb.OpenOut
	70,  // 70: pb.ReadDirRequest.read_in:type_name -> pb.ReadIn
	64,  // 71: pb.ReadDirResponse.status:type_name -> pb.Status
	72,  // 72: pb.ReadDirResponse.entries:type_name -> pb.DirEntry
	63,  // 73: pb.StatfsRequest.input:type_name -> pb.InHeader
	64,  // 74: pb.StatfsResponse.status:type_name -> pb.Status
	0,   // 75: pb.RawFileSystem.String:input_type -> pb.StringRequest
	2,   // 76: pb.RawFileSystem.Lookup:input_type -> pb.LookupRequest
	4,   // 77: pb.RawFileSystem.Forget:input_type -> pb.ForgetRequest
	5,   // 78: pb.RawFileSystem.GetAttr:input_type -> pb.GetAttrRequest
	7,   // 79: pb.RawFileSystem.SetAttr:input_type -> pb.SetAttrRequest
	9,   // 80: pb.RawFileSystem.Mknod:input_type -> pb.MknodRequest
	11,  // 81: pb.RawFileSystem.Mkdir:input_type -> pb.MkdirRequest
	13,  // 82: pb.RawFileSystem.Unlink:input_type -> pb.UnlinkRequest
	15,  // 83: pb.RawFileSystem.Rmdir:input_type -> pb.RmdirRequest
	17,  // 84: pb.RawFileSystem.Rename:input_type -> pb.RenameRequest
	19,  // 85: pb.RawFileSystem.Link:input_type -> pb.LinkRequest
	21,  // 86: pb.RawFileSystem.Symlink:input_type -> pb.SymlinkRequest
	23,  // 87: pb.RawFileSystem.Readlink:input_type -> pb.ReadlinkRequest
	25,  // 88: pb.RawFileSystem.Access:input_type -> pb.AccessRequest
	27,  // 89: pb.RawFileSystem.GetXAttr:input_type -> pb.GetXAttrRequest
	29,  // 90: pb.RawFileSystem.ListXAttr:input_type -> pb.ListXAttrRequest
	31,  // 91: pb.RawFileSystem.SetXAttr:input_type -> pb.SetXAttrRequest
	33,  // 92: pb.RawFileSystem.RemoveXAttr:input_type -> pb.RemoveXAttrRequest
	35,  // 93: pb.RawFileSystem.Create:input_type -> pb.CreateRequest
	37,  // 94: pb.RawFileSystem.Open:input_type -> pb.OpenRequest
	39,  // 95: pb.RawFileSystem.Read:input_type -> pb.ReadRequest
	41,  // 96: pb.RawFileSystem.LSeek:input_type -> pb.LSeekRequest
	43,  // 97: pb.RawFileSystem.GetLk:input_type -> pb.LkRequest
	43,  // 98: pb.RawFileSystem.SetLk:input_type -> pb.LkRequest
	43,  // 99: pb.RawFileSystem.SetLkw:input_type -> pb.LkRequest
	46,  // 100: pb.RawFileSystem.Release:input_type -> pb.ReleaseRequest
	47,  // 101: pb.RawFileSystem.Write:input_type -> pb.WriteRequest
	49,  // 102: pb.RawFileSystem.CopyFileRange:input_type -> pb.CopyFileRangeRequest
	51,  // 103: pb.RawFileSystem.Flush:input_type -> pb.FlushRequest
	53,  // 104: pb.RawFileSystem.Fsync:input_type -> pb.FsyncRequest
	55,  // 105: pb.RawFileSystem.Fallocate:input_type -> pb.FallocateRequest
	57,  // 106: pb.RawFileSystem.OpenDir:input_type -> pb.OpenDirRequest
	59,  // 107: pb.RawFileSystem.ReadDir:input_type -> pb.ReadDirRequest
	59,  // 108: pb.RawFileSystem.ReadDirPlus:input_type -> pb.ReadDirRequest
	46,  // 109: pb.RawFileSystem.ReleaseDir:input_type -> pb.ReleaseRequest
	53,  // 110: pb.RawFileSystem.FsyncDir:input_type -> pb.FsyncRequest
	61,  // 111: pb.RawFileSystem.StatFs:input_type -> pb.StatfsRequest
	1,   // 112: pb.RawFileSystem.String:output_type -> pb.StringResponse
	3,   // 113: pb.RawFileSystem.Lookup:output_type -> pb.LookupResponse
	73,  // 114: pb.RawFileSystem.Forget:output_type -> google.protobuf.Empty
	6,   // 115: pb.RawFileSystem.GetAttr:output_type -> pb.GetAttrResponse
	8,   // 116: pb.RawFileSystem.SetAttr:output_type -> pb.SetAttrResponse
	10,  // 117: pb.RawFileSystem.Mknod:output_type -> pb.MknodResponse
	12,  // 118: pb.RawFileSystem.Mkdir:output_type -> pb.MkdirResponse
	14,  // 119: pb.RawFileSystem.Unlink:output_type -> pb.UnlinkResponse
	16,  // 120: pb.RawFileSystem.Rmdir:output_type -> pb.RmdirResponse
	18,  // 121: pb.RawFileSystem.Rename:output_type -> pb.RenameResponse
	20,  // 122: pb.RawFileSystem.Link:output_type -> pb.LinkResponse
	22,  // 123: pb.RawFileSystem.Symlink:output_type -> pb.SymlinkResponse
	24,  // 124: pb.RawFileSystem.Readlink:output_type -> pb.ReadlinkResponse
	26,  // 125: pb.RawFileSystem.Access:output_type -> pb.AccessResponse
	28,  // 126: pb.RawFileSystem.GetXAttr:output_type -> pb.GetXAttrResponse
	30,  // 127: pb.RawFileSystem.ListXAttr:output_type -> pb.ListXAttrResponse
	32,  // 128: pb.RawFileSystem.SetXAttr:output_type -> pb.SetXAttrResponse
	34,  // 129: pb.RawFileSystem.RemoveXAttr:output_type -> pb.RemoveXAttrResponse
	36,  // 130: pb.RawFileSystem.Create:output_type -> pb.CreateResponse
	38,  // 131: pb.RawFileSystem.Open:output_type -> pb.OpenResponse
	40,  // 132: pb.RawFileSystem.Read:output_type -> pb.ReadResponse
	42,  // 133: pb.RawFileSystem.LSeek:output_type -> pb.LSeekResponse
	44,  // 134: pb.RawFileSystem.GetLk:output_type -> pb.GetLkResponse
	45,  // 135: pb.RawFileSystem.SetLk:output_type -> pb.SetLkResponse
	45,  // 136: pb.RawFileSystem.SetLkw:output_type -> pb.SetLkResponse
	73,  // 137: pb.RawFileSystem.Release:output_type -> google.protobuf.Empty
	48,  // 138: pb.RawFileSystem.Write:output_type -> pb.WriteResponse
	50,  // 139: pb.RawFileSystem.CopyFileRange:output_type -> pb.CopyFileRangeResponse
	52,  // 140: pb.RawFileSystem.Flush:output_type -> pb.FlushResponse
	54,  // 141: pb.RawFileSystem.Fsync:output_type -> pb.FsyncResponse
	56,  // 142: pb.RawFileSystem.Fallocate:output_type -> pb.FallocateResponse
	58,  // 143: pb.RawFileSystem.OpenDir:output_type -> pb.OpenDirResponse
	60,  // 144: pb.RawFileSystem.ReadDir:output_type -> pb.ReadDirResponse
	60,  // 145: pb.RawFileSystem.ReadDirPlus:output_type -> pb.ReadDirResponse
	73,  // 146: pb.RawFileSystem.ReleaseDir:output_type -> google.protobuf.Empty
	54,  // 147: pb.RawFileSystem.FsyncDir:output_type -> pb.FsyncResponse
	62,  // 148: pb.RawFileSystem.StatFs:output_type -> pb.StatfsResponse
	112, // [112:149] is the sub-list for method output_type
	75,  // [75:112] is the sub-list for method input_type
	75,  // [75:75] is the sub-list for extension type_name
	75,  // [75:75] is the sub-list for extension extendee
	0,   // [0:75] is the sub-list for field type_name
}

func init() { file_raw_file_system_proto_init() }
func file_raw_file_system_proto_init() {
	if File_raw_file_system_proto != nil {
		return
	}
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_raw_file_system_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MknodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MknodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MkdirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MkdirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RmdirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RmdirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymlinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymlinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadlinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadlinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetXAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetXAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetXAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetXAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveXAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveXAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSeekRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSeekResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFileRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFileRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FsyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FsyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallocateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallocateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenDirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenDirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatfsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raw_file_system_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatfsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raw_file_system_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_raw_file_system_proto_goTypes,
		DependencyIndexes: file_raw_file_system_proto_depIdxs,
		MessageInfos:      file_raw_file_system_proto_msgTypes,
	}.Build()
	File_raw_file_system_proto = out.File
	file_raw_file_system_proto_rawDesc = nil
	file_raw_file_system_proto_goTypes = nil
	file_raw_file_system_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RawFileSystemClient is the client API for RawFileSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RawFileSystemClient interface {
	String(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error)
	// Lookup is called by the kernel when the VFS wants to know
	// about a file inside a directory. Many lookup calls can
	// occur in parallel, but only one call happens for each (dir,
	// name) pair.
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	// Forget is called when the kernel discards entries from its
	// dentry cache. This happens on unmount, and when the kernel
	// is short on memory. Since it is not guaranteed to occur at
	// any moment, and since there is no return value, Forget
	// should not do I/O, as there is no channel to report back
	// I/O errors.
	Forget(ctx context.Context, in *ForgetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Atributes
	GetAttr(ctx context.Context, in *GetAttrRequest, opts ...grpc.CallOption) (*GetAttrResponse, error)
	SetAttr(ctx context.Context, in *SetAttrRequest, opts ...grpc.CallOption) (*SetAttrResponse, error)
	// Modifying structure.
	Mknod(ctx context.Context, in *MknodRequest, opts ...grpc.CallOption) (*MknodResponse, error)
	Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error)
	Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkResponse, error)
	Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*RmdirResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	Symlink(ctx context.Context, in *SymlinkRequest, opts ...grpc.CallOption) (*SymlinkResponse, error)
	Readlink(ctx context.Context, in *ReadlinkRequest, opts ...grpc.CallOption) (*ReadlinkResponse, error)
	Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error)
	// GetXAttr reads an extended attribute, and should return the
	// number of bytes. If the buffer is too small, return ERANGE,
	// with the required buffer size.
	GetXAttr(ctx context.Context, in *GetXAttrRequest, opts ...grpc.CallOption) (*GetXAttrResponse, error)
	// ListXAttr lists extended attributes as '\0' delimited byte
	// slice, and return the number of bytes. If the buffer is too
	// small, return ERANGE, with the required buffer size.
	ListXAttr(ctx context.Context, in *ListXAttrRequest, opts ...grpc.CallOption) (*ListXAttrResponse, error)
	// SetAttr writes an extended attribute.
	SetXAttr(ctx context.Context, in *SetXAttrRequest, opts ...grpc.CallOption) (*SetXAttrResponse, error)
	// RemoveXAttr removes an extended attribute.
	RemoveXAttr(ctx context.Context, in *RemoveXAttrRequest, opts ...grpc.CallOption) (*RemoveXAttrResponse, error)
	// File handling.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (RawFileSystem_ReadClient, error)
	LSeek(ctx context.Context, in *LSeekRequest, opts ...grpc.CallOption) (*LSeekResponse, error)
	// File locking
	GetLk(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*GetLkResponse, error)
	SetLk(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*SetLkResponse, error)
	SetLkw(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*SetLkResponse, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	CopyFileRange(ctx context.Context, in *CopyFileRangeRequest, opts ...grpc.CallOption) (*CopyFileRangeResponse, error)
	Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error)
	Fsync(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncResponse, error)
	Fallocate(ctx context.Context, in *FallocateRequest, opts ...grpc.CallOption) (*FallocateResponse, error)
	// Directory handling
	OpenDir(ctx context.Context, in *OpenDirRequest, opts ...grpc.CallOption) (*OpenDirResponse, error)
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (RawFileSystem_ReadDirClient, error)
	ReadDirPlus(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (RawFileSystem_ReadDirPlusClient, error)
	ReleaseDir(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FsyncDir(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncResponse, error)
	StatFs(ctx context.Context, in *StatfsRequest, opts ...grpc.CallOption) (*StatfsResponse, error)
}

type rawFileSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewRawFileSystemClient(cc grpc.ClientConnInterface) RawFileSystemClient {
	return &rawFileSystemClient{cc}
}

func (c *rawFileSystemClient) String(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/String", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Forget(ctx context.Context, in *ForgetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Forget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) GetAttr(ctx context.Context, in *GetAttrRequest, opts ...grpc.CallOption) (*GetAttrResponse, error) {
	out := new(GetAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/GetAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) SetAttr(ctx context.Context, in *SetAttrRequest, opts ...grpc.CallOption) (*SetAttrResponse, error) {
	out := new(SetAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/SetAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Mknod(ctx context.Context, in *MknodRequest, opts ...grpc.CallOption) (*MknodResponse, error) {
	out := new(MknodResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Mknod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error) {
	out := new(MkdirResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkResponse, error) {
	out := new(UnlinkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Unlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*RmdirResponse, error) {
	out := new(RmdirResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Rmdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	out := new(RenameResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Symlink(ctx context.Context, in *SymlinkRequest, opts ...grpc.CallOption) (*SymlinkResponse, error) {
	out := new(SymlinkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Symlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Readlink(ctx context.Context, in *ReadlinkRequest, opts ...grpc.CallOption) (*ReadlinkResponse, error) {
	out := new(ReadlinkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Readlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error) {
	out := new(AccessResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Access", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) GetXAttr(ctx context.Context, in *GetXAttrRequest, opts ...grpc.CallOption) (*GetXAttrResponse, error) {
	out := new(GetXAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/GetXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) ListXAttr(ctx context.Context, in *ListXAttrRequest, opts ...grpc.CallOption) (*ListXAttrResponse, error) {
	out := new(ListXAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/ListXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) SetXAttr(ctx context.Context, in *SetXAttrRequest, opts ...grpc.CallOption) (*SetXAttrResponse, error) {
	out := new(SetXAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/SetXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) RemoveXAttr(ctx context.Context, in *RemoveXAttrRequest, opts ...grpc.CallOption) (*RemoveXAttrResponse, error) {
	out := new(RemoveXAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/RemoveXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	out := new(OpenResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (RawFileSystem_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RawFileSystem_serviceDesc.Streams[0], "/pb.RawFileSystem/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &rawFileSystemReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RawFileSystem_ReadClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type rawFileSystemReadClient struct {
	grpc.ClientStream
}

func (x *rawFileSystemReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rawFileSystemClient) LSeek(ctx context.Context, in *LSeekRequest, opts ...grpc.CallOption) (*LSeekResponse, error) {
	out := new(LSeekResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/LSeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) GetLk(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*GetLkResponse, error) {
	out := new(GetLkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/GetLk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) SetLk(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*SetLkResponse, error) {
	out := new(SetLkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/SetLk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) SetLkw(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*SetLkResponse, error) {
	out := new(SetLkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/SetLkw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) CopyFileRange(ctx context.Context, in *CopyFileRangeRequest, opts ...grpc.CallOption) (*CopyFileRangeResponse, error) {
	out := new(CopyFileRangeResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/CopyFileRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error) {
	out := new(FlushResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Fsync(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncResponse, error) {
	out := new(FsyncResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Fsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Fallocate(ctx context.Context, in *FallocateRequest, opts ...grpc.CallOption) (*FallocateResponse, error) {
	out := new(FallocateResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Fallocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) OpenDir(ctx context.Context, in *OpenDirRequest, opts ...grpc.CallOption) (*OpenDirResponse, error) {
	out := new(OpenDirResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/OpenDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (RawFileSystem_ReadDirClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RawFileSystem_serviceDesc.Streams[1], "/pb.RawFileSystem/ReadDir", opts...)
	if err != nil {
		return nil, err
	}
	x := &rawFileSystemReadDirClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RawFileSystem_ReadDirClient interface {
	Recv() (*ReadDirResponse, error)
	grpc.ClientStream
}

type rawFileSystemReadDirClient struct {
	grpc.ClientStream
}

func (x *rawFileSystemReadDirClient) Recv() (*ReadDirResponse, error) {
	m := new(ReadDirResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rawFileSystemClient) ReadDirPlus(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (RawFileSystem_ReadDirPlusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RawFileSystem_serviceDesc.Streams[2], "/pb.RawFileSystem/ReadDirPlus", opts...)
	if err != nil {
		return nil, err
	}
	x := &rawFileSystemReadDirPlusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RawFileSystem_ReadDirPlusClient interface {
	Recv() (*ReadDirResponse, error)
	grpc.ClientStream
}

type rawFileSystemReadDirPlusClient struct {
	grpc.ClientStream
}

func (x *rawFileSystemReadDirPlusClient) Recv() (*ReadDirResponse, error) {
	m := new(ReadDirResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rawFileSystemClient) ReleaseDir(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/ReleaseDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) FsyncDir(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncResponse, error) {
	out := new(FsyncResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/FsyncDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) StatFs(ctx context.Context, in *StatfsRequest, opts ...grpc.CallOption) (*StatfsResponse, error) {
	out := new(StatfsResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/StatFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RawFileSystemServer is the server API for RawFileSystem service.
type RawFileSystemServer interface {
	String(context.Context, *StringRequest) (*StringResponse, error)
	// Lookup is called by the kernel when the VFS wants to know
	// about a file inside a directory. Many lookup calls can
	// occur in parallel, but only one call happens for each (dir,
	// name) pair.
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	// Forget is called when the kernel discards entries from its
	// dentry cache. This happens on unmount, and when the kernel
	// is short on memory. Since it is not guaranteed to occur at
	// any moment, and since there is no return value, Forget
	// should not do I/O, as there is no channel to report back
	// I/O errors.
	Forget(context.Context, *ForgetRequest) (*emptypb.Empty, error)
	// Atributes
	GetAttr(context.Context, *GetAttrRequest) (*GetAttrResponse, error)
	SetAttr(context.Context, *SetAttrRequest) (*SetAttrResponse, error)
	// Modifying structure.
	Mknod(context.Context, *MknodRequest) (*MknodResponse, error)
	Mkdir(context.Context, *MkdirRequest) (*MkdirResponse, error)
	Unlink(context.Context, *UnlinkRequest) (*UnlinkResponse, error)
	Rmdir(context.Context, *RmdirRequest) (*RmdirResponse, error)
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	Link(context.Context, *LinkRequest) (*LinkResponse, error)
	Symlink(context.Context, *SymlinkRequest) (*SymlinkResponse, error)
	Readlink(context.Context, *ReadlinkRequest) (*ReadlinkResponse, error)
	Access(context.Context, *AccessRequest) (*AccessResponse, error)
	// GetXAttr reads an extended attribute, and should return the
	// number of bytes. If the buffer is too small, return ERANGE,
	// with the required buffer size.
	GetXAttr(context.Context, *GetXAttrRequest) (*GetXAttrResponse, error)
	// ListXAttr lists extended attributes as '\0' delimited byte
	// slice, and return the number of bytes. If the buffer is too
	// small, return ERANGE, with the required buffer size.
	ListXAttr(context.Context, *ListXAttrRequest) (*ListXAttrResponse, error)
	// SetAttr writes an extended attribute.
	SetXAttr(context.Context, *SetXAttrRequest) (*SetXAttrResponse, error)
	// RemoveXAttr removes an extended attribute.
	RemoveXAttr(context.Context, *RemoveXAttrRequest) (*RemoveXAttrResponse, error)
	// File handling.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
	Read(*ReadRequest, RawFileSystem_ReadServer) error
	LSeek(context.Context, *LSeekRequest) (*LSeekResponse, error)
	// File locking
	GetLk(context.Context, *LkRequest) (*GetLkResponse, error)
	SetLk(context.Context, *LkRequest) (*SetLkResponse, error)
	SetLkw(context.Context, *LkRequest) (*SetLkResponse, error)
	Release(context.Context, *ReleaseRequest) (*emptypb.Empty, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	CopyFileRange(context.Context, *CopyFileRangeRequest) (*CopyFileRangeResponse, error)
	Flush(context.Context, *FlushRequest) (*FlushResponse, error)
	Fsync(context.Context, *FsyncRequest) (*FsyncResponse, error)
	Fallocate(context.Context, *FallocateRequest) (*FallocateResponse, error)
	// Directory handling
	OpenDir(context.Context, *OpenDirRequest) (*OpenDirResponse, error)
	ReadDir(*ReadDirRequest, RawFileSystem_ReadDirServer) error
	ReadDirPlus(*ReadDirRequest, RawFileSystem_ReadDirPlusServer) error
	ReleaseDir(context.Context, *ReleaseRequest) (*emptypb.Empty, error)
	FsyncDir(context.Context, *FsyncRequest) (*FsyncResponse, error)
	StatFs(context.Context, *StatfsRequest) (*StatfsResponse, error)
}

// UnimplementedRawFileSystemServer can be embedded to have forward compatible implementations.
type UnimplementedRawFileSystemServer struct {
}

func (*UnimplementedRawFileSystemServer) String(context.Context, *StringRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method String not implemented")
}
func (*UnimplementedRawFileSystemServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (*UnimplementedRawFileSystemServer) Forget(context.Context, *ForgetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forget not implemented")
}
func (*UnimplementedRawFileSystemServer) GetAttr(context.Context, *GetAttrRequest) (*GetAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttr not implemented")
}
func (*UnimplementedRawFileSystemServer) SetAttr(context.Context, *SetAttrRequest) (*SetAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAttr not implemented")
}
func (*UnimplementedRawFileSystemServer) Mknod(context.Context, *MknodRequest) (*MknodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mknod not implemented")
}
func (*UnimplementedRawFileSystemServer) Mkdir(context.Context, *MkdirRequest) (*MkdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (*UnimplementedRawFileSystemServer) Unlink(context.Context, *UnlinkRequest) (*UnlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlink not implemented")
}
func (*UnimplementedRawFileSystemServer) Rmdir(context.Context, *RmdirRequest) (*RmdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rmdir not implemented")
}
func (*UnimplementedRawFileSystemServer) Rename(context.Context, *RenameRequest) (*RenameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (*UnimplementedRawFileSystemServer) Link(context.Context, *LinkRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (*UnimplementedRawFileSystemServer) Symlink(context.Context, *SymlinkRequest) (*SymlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Symlink not implemented")
}
func (*UnimplementedRawFileSystemServer) Readlink(context.Context, *ReadlinkRequest) (*ReadlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readlink not implemented")
}
func (*UnimplementedRawFileSystemServer) Access(context.Context, *AccessRequest) (*AccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Access not implemented")
}
func (*UnimplementedRawFileSystemServer) GetXAttr(context.Context, *GetXAttrRequest) (*GetXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXAttr not implemented")
}
func (*UnimplementedRawFileSystemServer) ListXAttr(context.Context, *ListXAttrRequest) (*ListXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListXAttr not implemented")
}
func (*UnimplementedRawFileSystemServer) SetXAttr(context.Context, *SetXAttrRequest) (*SetXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetXAttr not implemented")
}
func (*UnimplementedRawFileSystemServer) RemoveXAttr(context.Context, *RemoveXAttrRequest) (*RemoveXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveXAttr not implemented")
}
func (*UnimplementedRawFileSystemServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRawFileSystemServer) Open(context.Context, *OpenRequest) (*OpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedRawFileSystemServer) Read(*ReadRequest, RawFileSystem_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedRawFileSystemServer) LSeek(context.Context, *LSeekRequest) (*LSeekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LSeek not implemented")
}
func (*UnimplementedRawFileSystemServer) GetLk(context.Context, *LkRequest) (*GetLkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLk not implemented")
}
func (*UnimplementedRawFileSystemServer) SetLk(context.Context, *LkRequest) (*SetLkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLk not implemented")
}
func (*UnimplementedRawFileSystemServer) SetLkw(context.Context, *LkRequest) (*SetLkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLkw not implemented")
}
func (*UnimplementedRawFileSystemServer) Release(context.Context, *ReleaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (*UnimplementedRawFileSystemServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (*UnimplementedRawFileSystemServer) CopyFileRange(context.Context, *CopyFileRangeRequest) (*CopyFileRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFileRange not implemented")
}
func (*UnimplementedRawFileSystemServer) Flush(context.Context, *FlushRequest) (*FlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (*UnimplementedRawFileSystemServer) Fsync(context.Context, *FsyncRequest) (*FsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fsync not implemented")
}
func (*UnimplementedRawFileSystemServer) Fallocate(context.Context, *FallocateRequest) (*FallocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fallocate not implemented")
}
func (*UnimplementedRawFileSystemServer) OpenDir(context.Context, *OpenDirRequest) (*OpenDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDir not implemented")
}
func (*UnimplementedRawFileSystemServer) ReadDir(*ReadDirRequest, RawFileSystem_ReadDirServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadDir not implemented")
}
func (*UnimplementedRawFileSystemServer) ReadDirPlus(*ReadDirRequest, RawFileSystem_ReadDirPlusServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadDirPlus not implemented")
}
func (*UnimplementedRawFileSystemServer) ReleaseDir(context.Context, *ReleaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseDir not implemented")
}
func (*UnimplementedRawFileSystemServer) FsyncDir(context.Context, *FsyncRequest) (*FsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsyncDir not implemented")
}
func (*UnimplementedRawFileSystemServer) StatFs(context.Context, *StatfsRequest) (*StatfsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatFs not implemented")
}

func RegisterRawFileSystemServer(s *grpc.Server, srv RawFileSystemServer) {
	s.RegisterService(&_RawFileSystem_serviceDesc, srv)
}

func _RawFileSystem_String_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).String(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/String",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).String(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Forget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Forget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Forget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Forget(ctx, req.(*ForgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_GetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).GetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/GetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).GetAttr(ctx, req.(*GetAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_SetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).SetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/SetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).SetAttr(ctx, req.(*SetAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Mknod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MknodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Mknod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Mknod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Mknod(ctx, req.(*MknodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Mkdir(ctx, req.(*MkdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Unlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Unlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Unlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Unlink(ctx, req.(*UnlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Rmdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Rmdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Rmdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Rmdir(ctx, req.(*RmdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Link(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Symlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Symlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Symlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Symlink(ctx, req.(*SymlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Readlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Readlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Readlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Readlink(ctx, req.(*ReadlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Access",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Access(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_GetXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).GetXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/GetXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).GetXAttr(ctx, req.(*GetXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_ListXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).ListXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/ListXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).ListXAttr(ctx, req.(*ListXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_SetXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).SetXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/SetXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).SetXAttr(ctx, req.(*SetXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_RemoveXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).RemoveXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/RemoveXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).RemoveXAttr(ctx, req.(*RemoveXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RawFileSystemServer).Read(m, &rawFileSystemReadServer{stream})
}

type RawFileSystem_ReadServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type rawFileSystemReadServer struct {
	grpc.ServerStream
}

func (x *rawFileSystemReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RawFileSystem_LSeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LSeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).LSeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/LSeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).LSeek(ctx, req.(*LSeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_GetLk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).GetLk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/GetLk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).GetLk(ctx, req.(*LkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_SetLk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).SetLk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/SetLk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).SetLk(ctx, req.(*LkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_SetLkw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).SetLkw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/SetLkw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).SetLkw(ctx, req.(*LkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_CopyFileRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).CopyFileRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/CopyFileRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).CopyFileRange(ctx, req.(*CopyFileRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Flush(ctx, req.(*FlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Fsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Fsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Fsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Fsync(ctx, req.(*FsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Fallocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FallocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Fallocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Fallocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Fallocate(ctx, req.(*FallocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_OpenDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).OpenDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/OpenDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).OpenDir(ctx, req.(*OpenDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_ReadDir_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadDirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RawFileSystemServer).ReadDir(m, &rawFileSystemReadDirServer{stream})
}

type RawFileSystem_ReadDirServer interface {
	Send(*ReadDirResponse) error
	grpc.ServerStream
}

type rawFileSystemReadDirServer struct {
	grpc.ServerStream
}

func (x *rawFileSystemReadDirServer) Send(m *ReadDirResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RawFileSystem_ReadDirPlus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadDirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RawFileSystemServer).ReadDirPlus(m, &rawFileSystemReadDirPlusServer{stream})
}

type RawFileSystem_ReadDirPlusServer interface {
	Send(*ReadDirResponse) error
	grpc.ServerStream
}

type rawFileSystemReadDirPlusServer struct {
	grpc.ServerStream
}

func (x *rawFileSystemReadDirPlusServer) Send(m *ReadDirResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RawFileSystem_ReleaseDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).ReleaseDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/ReleaseDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).ReleaseDir(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_FsyncDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).FsyncDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/FsyncDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).FsyncDir(ctx, req.(*FsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_StatFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).StatFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/StatFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).StatFs(ctx, req.(*StatfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RawFileSystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RawFileSystem",
	HandlerType: (*RawFileSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "String",
			Handler:    _RawFileSystem_String_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _RawFileSystem_Lookup_Handler,
		},
		{
			MethodName: "Forget",
			Handler:    _RawFileSystem_Forget_Handler,
		},
		{
			MethodName: "GetAttr",
			Handler:    _RawFileSystem_GetAttr_Handler,
		},
		{
			MethodName: "SetAttr",
			Handler:    _RawFileSystem_SetAttr_Handler,
		},
		{
			MethodName: "Mknod",
			Handler:    _RawFileSystem_Mknod_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _RawFileSystem_Mkdir_Handler,
		},
		{
			MethodName: "Unlink",
			Handler:    _RawFileSystem_Unlink_Handler,
		},
		{
			MethodName: "Rmdir",
			Handler:    _RawFileSystem_Rmdir_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _RawFileSystem_Rename_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _RawFileSystem_Link_Handler,
		},
		{
			MethodName: "Symlink",
			Handler:    _RawFileSystem_Symlink_Handler,
		},
		{
			MethodName: "Readlink",
			Handler:    _RawFileSystem_Readlink_Handler,
		},
		{
			MethodName: "Access",
			Handler:    _RawFileSystem_Access_Handler,
		},
		{
			MethodName: "GetXAttr",
			Handler:    _RawFileSystem_GetXAttr_Handler,
		},
		{
			MethodName: "ListXAttr",
			Handler:    _RawFileSystem_ListXAttr_Handler,
		},
		{
			MethodName: "SetXAttr",
			Handler:    _RawFileSystem_SetXAttr_Handler,
		},
		{
			MethodName: "RemoveXAttr",
			Handler:    _RawFileSystem_RemoveXAttr_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RawFileSystem_Create_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _RawFileSystem_Open_Handler,
		},
		{
			MethodName: "LSeek",
			Handler:    _RawFileSystem_LSeek_Handler,
		},
		{
			MethodName: "GetLk",
			Handler:    _RawFileSystem_GetLk_Handler,
		},
		{
			MethodName: "SetLk",
			Handler:    _RawFileSystem_SetLk_Handler,
		},
		{
			MethodName: "SetLkw",
			Handler:    _RawFileSystem_SetLkw_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _RawFileSystem_Release_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _RawFileSystem_Write_Handler,
		},
		{
			MethodName: "CopyFileRange",
			Handler:    _RawFileSystem_CopyFileRange_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _RawFileSystem_Flush_Handler,
		},
		{
			MethodName: "Fsync",
			Handler:    _RawFileSystem_Fsync_Handler,
		},
		{
			MethodName: "Fallocate",
			Handler:    _RawFileSystem_Fallocate_Handler,
		},
		{
			MethodName: "OpenDir",
			Handler:    _RawFileSystem_OpenDir_Handler,
		},
		{
			MethodName: "ReleaseDir",
			Handler:    _RawFileSystem_ReleaseDir_Handler,
		},
		{
			MethodName: "FsyncDir",
			Handler:    _RawFileSystem_FsyncDir_Handler,
		},
		{
			MethodName: "StatFs",
			Handler:    _RawFileSystem_StatFs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _RawFileSystem_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadDir",
			Handler:       _RawFileSystem_ReadDir_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadDirPlus",
			Handler:       _RawFileSystem_ReadDirPlus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "raw_file_system.proto",
}
