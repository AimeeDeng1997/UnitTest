// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: raw_file_system.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RawFileSystemClient is the client API for RawFileSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RawFileSystemClient interface {
	String(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error)
	// Lookup is called by the kernel when the VFS wants to know
	// about a file inside a directory. Many lookup calls can
	// occur in parallel, but only one call happens for each (dir,
	// name) pair.
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	// Forget is called when the kernel discards entries from its
	// dentry cache. This happens on unmount, and when the kernel
	// is short on memory. Since it is not guaranteed to occur at
	// any moment, and since there is no return value, Forget
	// should not do I/O, as there is no channel to report back
	// I/O errors.
	Forget(ctx context.Context, in *ForgetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Atributes
	GetAttr(ctx context.Context, in *GetAttrRequest, opts ...grpc.CallOption) (*GetAttrResponse, error)
	SetAttr(ctx context.Context, in *SetAttrRequest, opts ...grpc.CallOption) (*SetAttrResponse, error)
	// Modifying structure.
	Mknod(ctx context.Context, in *MknodRequest, opts ...grpc.CallOption) (*MknodResponse, error)
	Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error)
	Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkResponse, error)
	Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*RmdirResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	Symlink(ctx context.Context, in *SymlinkRequest, opts ...grpc.CallOption) (*SymlinkResponse, error)
	Readlink(ctx context.Context, in *ReadlinkRequest, opts ...grpc.CallOption) (*ReadlinkResponse, error)
	Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error)
	// GetXAttr reads an extended attribute, and should return the
	// number of bytes. If the buffer is too small, return ERANGE,
	// with the required buffer size.
	GetXAttr(ctx context.Context, in *GetXAttrRequest, opts ...grpc.CallOption) (*GetXAttrResponse, error)
	// ListXAttr lists extended attributes as '\0' delimited byte
	// slice, and return the number of bytes. If the buffer is too
	// small, return ERANGE, with the required buffer size.
	ListXAttr(ctx context.Context, in *ListXAttrRequest, opts ...grpc.CallOption) (*ListXAttrResponse, error)
	// SetAttr writes an extended attribute.
	SetXAttr(ctx context.Context, in *SetXAttrRequest, opts ...grpc.CallOption) (*SetXAttrResponse, error)
	// RemoveXAttr removes an extended attribute.
	RemoveXAttr(ctx context.Context, in *RemoveXAttrRequest, opts ...grpc.CallOption) (*RemoveXAttrResponse, error)
	// File handling.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (RawFileSystem_ReadClient, error)
	Lseek(ctx context.Context, in *LseekRequest, opts ...grpc.CallOption) (*LseekResponse, error)
	// File locking
	GetLk(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*GetLkResponse, error)
	SetLk(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*SetLkResponse, error)
	SetLkw(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*SetLkResponse, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	CopyFileRange(ctx context.Context, in *CopyFileRangeRequest, opts ...grpc.CallOption) (*CopyFileRangeResponse, error)
	Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error)
	Fsync(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncResponse, error)
	Fallocate(ctx context.Context, in *FallocateRequest, opts ...grpc.CallOption) (*FallocateResponse, error)
	// Directory handling
	OpenDir(ctx context.Context, in *OpenDirRequest, opts ...grpc.CallOption) (*OpenDirResponse, error)
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (RawFileSystem_ReadDirClient, error)
	ReadDirPlus(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (RawFileSystem_ReadDirPlusClient, error)
	ReleaseDir(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FsyncDir(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncResponse, error)
	StatFs(ctx context.Context, in *StatfsRequest, opts ...grpc.CallOption) (*StatfsResponse, error)
}

type rawFileSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewRawFileSystemClient(cc grpc.ClientConnInterface) RawFileSystemClient {
	return &rawFileSystemClient{cc}
}

func (c *rawFileSystemClient) String(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/String", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Forget(ctx context.Context, in *ForgetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Forget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) GetAttr(ctx context.Context, in *GetAttrRequest, opts ...grpc.CallOption) (*GetAttrResponse, error) {
	out := new(GetAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/GetAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) SetAttr(ctx context.Context, in *SetAttrRequest, opts ...grpc.CallOption) (*SetAttrResponse, error) {
	out := new(SetAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/SetAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Mknod(ctx context.Context, in *MknodRequest, opts ...grpc.CallOption) (*MknodResponse, error) {
	out := new(MknodResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Mknod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error) {
	out := new(MkdirResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkResponse, error) {
	out := new(UnlinkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Unlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*RmdirResponse, error) {
	out := new(RmdirResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Rmdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	out := new(RenameResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Symlink(ctx context.Context, in *SymlinkRequest, opts ...grpc.CallOption) (*SymlinkResponse, error) {
	out := new(SymlinkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Symlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Readlink(ctx context.Context, in *ReadlinkRequest, opts ...grpc.CallOption) (*ReadlinkResponse, error) {
	out := new(ReadlinkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Readlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error) {
	out := new(AccessResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Access", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) GetXAttr(ctx context.Context, in *GetXAttrRequest, opts ...grpc.CallOption) (*GetXAttrResponse, error) {
	out := new(GetXAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/GetXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) ListXAttr(ctx context.Context, in *ListXAttrRequest, opts ...grpc.CallOption) (*ListXAttrResponse, error) {
	out := new(ListXAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/ListXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) SetXAttr(ctx context.Context, in *SetXAttrRequest, opts ...grpc.CallOption) (*SetXAttrResponse, error) {
	out := new(SetXAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/SetXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) RemoveXAttr(ctx context.Context, in *RemoveXAttrRequest, opts ...grpc.CallOption) (*RemoveXAttrResponse, error) {
	out := new(RemoveXAttrResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/RemoveXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	out := new(OpenResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (RawFileSystem_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &RawFileSystem_ServiceDesc.Streams[0], "/pb.RawFileSystem/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &rawFileSystemReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RawFileSystem_ReadClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type rawFileSystemReadClient struct {
	grpc.ClientStream
}

func (x *rawFileSystemReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rawFileSystemClient) Lseek(ctx context.Context, in *LseekRequest, opts ...grpc.CallOption) (*LseekResponse, error) {
	out := new(LseekResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Lseek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) GetLk(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*GetLkResponse, error) {
	out := new(GetLkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/GetLk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) SetLk(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*SetLkResponse, error) {
	out := new(SetLkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/SetLk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) SetLkw(ctx context.Context, in *LkRequest, opts ...grpc.CallOption) (*SetLkResponse, error) {
	out := new(SetLkResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/SetLkw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) CopyFileRange(ctx context.Context, in *CopyFileRangeRequest, opts ...grpc.CallOption) (*CopyFileRangeResponse, error) {
	out := new(CopyFileRangeResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/CopyFileRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error) {
	out := new(FlushResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Fsync(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncResponse, error) {
	out := new(FsyncResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Fsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) Fallocate(ctx context.Context, in *FallocateRequest, opts ...grpc.CallOption) (*FallocateResponse, error) {
	out := new(FallocateResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/Fallocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) OpenDir(ctx context.Context, in *OpenDirRequest, opts ...grpc.CallOption) (*OpenDirResponse, error) {
	out := new(OpenDirResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/OpenDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (RawFileSystem_ReadDirClient, error) {
	stream, err := c.cc.NewStream(ctx, &RawFileSystem_ServiceDesc.Streams[1], "/pb.RawFileSystem/ReadDir", opts...)
	if err != nil {
		return nil, err
	}
	x := &rawFileSystemReadDirClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RawFileSystem_ReadDirClient interface {
	Recv() (*ReadDirResponse, error)
	grpc.ClientStream
}

type rawFileSystemReadDirClient struct {
	grpc.ClientStream
}

func (x *rawFileSystemReadDirClient) Recv() (*ReadDirResponse, error) {
	m := new(ReadDirResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rawFileSystemClient) ReadDirPlus(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (RawFileSystem_ReadDirPlusClient, error) {
	stream, err := c.cc.NewStream(ctx, &RawFileSystem_ServiceDesc.Streams[2], "/pb.RawFileSystem/ReadDirPlus", opts...)
	if err != nil {
		return nil, err
	}
	x := &rawFileSystemReadDirPlusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RawFileSystem_ReadDirPlusClient interface {
	Recv() (*ReadDirResponse, error)
	grpc.ClientStream
}

type rawFileSystemReadDirPlusClient struct {
	grpc.ClientStream
}

func (x *rawFileSystemReadDirPlusClient) Recv() (*ReadDirResponse, error) {
	m := new(ReadDirResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rawFileSystemClient) ReleaseDir(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/ReleaseDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) FsyncDir(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncResponse, error) {
	out := new(FsyncResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/FsyncDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawFileSystemClient) StatFs(ctx context.Context, in *StatfsRequest, opts ...grpc.CallOption) (*StatfsResponse, error) {
	out := new(StatfsResponse)
	err := c.cc.Invoke(ctx, "/pb.RawFileSystem/StatFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RawFileSystemServer is the server API for RawFileSystem service.
// All implementations must embed UnimplementedRawFileSystemServer
// for forward compatibility
type RawFileSystemServer interface {
	String(context.Context, *StringRequest) (*StringResponse, error)
	// Lookup is called by the kernel when the VFS wants to know
	// about a file inside a directory. Many lookup calls can
	// occur in parallel, but only one call happens for each (dir,
	// name) pair.
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	// Forget is called when the kernel discards entries from its
	// dentry cache. This happens on unmount, and when the kernel
	// is short on memory. Since it is not guaranteed to occur at
	// any moment, and since there is no return value, Forget
	// should not do I/O, as there is no channel to report back
	// I/O errors.
	Forget(context.Context, *ForgetRequest) (*emptypb.Empty, error)
	// Atributes
	GetAttr(context.Context, *GetAttrRequest) (*GetAttrResponse, error)
	SetAttr(context.Context, *SetAttrRequest) (*SetAttrResponse, error)
	// Modifying structure.
	Mknod(context.Context, *MknodRequest) (*MknodResponse, error)
	Mkdir(context.Context, *MkdirRequest) (*MkdirResponse, error)
	Unlink(context.Context, *UnlinkRequest) (*UnlinkResponse, error)
	Rmdir(context.Context, *RmdirRequest) (*RmdirResponse, error)
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	Link(context.Context, *LinkRequest) (*LinkResponse, error)
	Symlink(context.Context, *SymlinkRequest) (*SymlinkResponse, error)
	Readlink(context.Context, *ReadlinkRequest) (*ReadlinkResponse, error)
	Access(context.Context, *AccessRequest) (*AccessResponse, error)
	// GetXAttr reads an extended attribute, and should return the
	// number of bytes. If the buffer is too small, return ERANGE,
	// with the required buffer size.
	GetXAttr(context.Context, *GetXAttrRequest) (*GetXAttrResponse, error)
	// ListXAttr lists extended attributes as '\0' delimited byte
	// slice, and return the number of bytes. If the buffer is too
	// small, return ERANGE, with the required buffer size.
	ListXAttr(context.Context, *ListXAttrRequest) (*ListXAttrResponse, error)
	// SetAttr writes an extended attribute.
	SetXAttr(context.Context, *SetXAttrRequest) (*SetXAttrResponse, error)
	// RemoveXAttr removes an extended attribute.
	RemoveXAttr(context.Context, *RemoveXAttrRequest) (*RemoveXAttrResponse, error)
	// File handling.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
	Read(*ReadRequest, RawFileSystem_ReadServer) error
	Lseek(context.Context, *LseekRequest) (*LseekResponse, error)
	// File locking
	GetLk(context.Context, *LkRequest) (*GetLkResponse, error)
	SetLk(context.Context, *LkRequest) (*SetLkResponse, error)
	SetLkw(context.Context, *LkRequest) (*SetLkResponse, error)
	Release(context.Context, *ReleaseRequest) (*emptypb.Empty, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	CopyFileRange(context.Context, *CopyFileRangeRequest) (*CopyFileRangeResponse, error)
	Flush(context.Context, *FlushRequest) (*FlushResponse, error)
	Fsync(context.Context, *FsyncRequest) (*FsyncResponse, error)
	Fallocate(context.Context, *FallocateRequest) (*FallocateResponse, error)
	// Directory handling
	OpenDir(context.Context, *OpenDirRequest) (*OpenDirResponse, error)
	ReadDir(*ReadDirRequest, RawFileSystem_ReadDirServer) error
	ReadDirPlus(*ReadDirRequest, RawFileSystem_ReadDirPlusServer) error
	ReleaseDir(context.Context, *ReleaseRequest) (*emptypb.Empty, error)
	FsyncDir(context.Context, *FsyncRequest) (*FsyncResponse, error)
	StatFs(context.Context, *StatfsRequest) (*StatfsResponse, error)
	mustEmbedUnimplementedRawFileSystemServer()
}

// UnimplementedRawFileSystemServer must be embedded to have forward compatible implementations.
type UnimplementedRawFileSystemServer struct {
}

func (UnimplementedRawFileSystemServer) String(context.Context, *StringRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method String not implemented")
}
func (UnimplementedRawFileSystemServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedRawFileSystemServer) Forget(context.Context, *ForgetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forget not implemented")
}
func (UnimplementedRawFileSystemServer) GetAttr(context.Context, *GetAttrRequest) (*GetAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttr not implemented")
}
func (UnimplementedRawFileSystemServer) SetAttr(context.Context, *SetAttrRequest) (*SetAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAttr not implemented")
}
func (UnimplementedRawFileSystemServer) Mknod(context.Context, *MknodRequest) (*MknodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mknod not implemented")
}
func (UnimplementedRawFileSystemServer) Mkdir(context.Context, *MkdirRequest) (*MkdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedRawFileSystemServer) Unlink(context.Context, *UnlinkRequest) (*UnlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlink not implemented")
}
func (UnimplementedRawFileSystemServer) Rmdir(context.Context, *RmdirRequest) (*RmdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rmdir not implemented")
}
func (UnimplementedRawFileSystemServer) Rename(context.Context, *RenameRequest) (*RenameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedRawFileSystemServer) Link(context.Context, *LinkRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedRawFileSystemServer) Symlink(context.Context, *SymlinkRequest) (*SymlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Symlink not implemented")
}
func (UnimplementedRawFileSystemServer) Readlink(context.Context, *ReadlinkRequest) (*ReadlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readlink not implemented")
}
func (UnimplementedRawFileSystemServer) Access(context.Context, *AccessRequest) (*AccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Access not implemented")
}
func (UnimplementedRawFileSystemServer) GetXAttr(context.Context, *GetXAttrRequest) (*GetXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXAttr not implemented")
}
func (UnimplementedRawFileSystemServer) ListXAttr(context.Context, *ListXAttrRequest) (*ListXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListXAttr not implemented")
}
func (UnimplementedRawFileSystemServer) SetXAttr(context.Context, *SetXAttrRequest) (*SetXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetXAttr not implemented")
}
func (UnimplementedRawFileSystemServer) RemoveXAttr(context.Context, *RemoveXAttrRequest) (*RemoveXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveXAttr not implemented")
}
func (UnimplementedRawFileSystemServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRawFileSystemServer) Open(context.Context, *OpenRequest) (*OpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedRawFileSystemServer) Read(*ReadRequest, RawFileSystem_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedRawFileSystemServer) Lseek(context.Context, *LseekRequest) (*LseekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lseek not implemented")
}
func (UnimplementedRawFileSystemServer) GetLk(context.Context, *LkRequest) (*GetLkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLk not implemented")
}
func (UnimplementedRawFileSystemServer) SetLk(context.Context, *LkRequest) (*SetLkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLk not implemented")
}
func (UnimplementedRawFileSystemServer) SetLkw(context.Context, *LkRequest) (*SetLkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLkw not implemented")
}
func (UnimplementedRawFileSystemServer) Release(context.Context, *ReleaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedRawFileSystemServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedRawFileSystemServer) CopyFileRange(context.Context, *CopyFileRangeRequest) (*CopyFileRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFileRange not implemented")
}
func (UnimplementedRawFileSystemServer) Flush(context.Context, *FlushRequest) (*FlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedRawFileSystemServer) Fsync(context.Context, *FsyncRequest) (*FsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fsync not implemented")
}
func (UnimplementedRawFileSystemServer) Fallocate(context.Context, *FallocateRequest) (*FallocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fallocate not implemented")
}
func (UnimplementedRawFileSystemServer) OpenDir(context.Context, *OpenDirRequest) (*OpenDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDir not implemented")
}
func (UnimplementedRawFileSystemServer) ReadDir(*ReadDirRequest, RawFileSystem_ReadDirServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadDir not implemented")
}
func (UnimplementedRawFileSystemServer) ReadDirPlus(*ReadDirRequest, RawFileSystem_ReadDirPlusServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadDirPlus not implemented")
}
func (UnimplementedRawFileSystemServer) ReleaseDir(context.Context, *ReleaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseDir not implemented")
}
func (UnimplementedRawFileSystemServer) FsyncDir(context.Context, *FsyncRequest) (*FsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsyncDir not implemented")
}
func (UnimplementedRawFileSystemServer) StatFs(context.Context, *StatfsRequest) (*StatfsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatFs not implemented")
}
func (UnimplementedRawFileSystemServer) mustEmbedUnimplementedRawFileSystemServer() {}

// UnsafeRawFileSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RawFileSystemServer will
// result in compilation errors.
type UnsafeRawFileSystemServer interface {
	mustEmbedUnimplementedRawFileSystemServer()
}

func RegisterRawFileSystemServer(s grpc.ServiceRegistrar, srv RawFileSystemServer) {
	s.RegisterService(&RawFileSystem_ServiceDesc, srv)
}

func _RawFileSystem_String_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).String(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/String",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).String(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Forget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Forget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Forget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Forget(ctx, req.(*ForgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_GetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).GetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/GetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).GetAttr(ctx, req.(*GetAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_SetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).SetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/SetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).SetAttr(ctx, req.(*SetAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Mknod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MknodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Mknod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Mknod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Mknod(ctx, req.(*MknodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Mkdir(ctx, req.(*MkdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Unlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Unlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Unlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Unlink(ctx, req.(*UnlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Rmdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Rmdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Rmdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Rmdir(ctx, req.(*RmdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Link(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Symlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Symlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Symlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Symlink(ctx, req.(*SymlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Readlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Readlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Readlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Readlink(ctx, req.(*ReadlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Access",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Access(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_GetXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).GetXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/GetXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).GetXAttr(ctx, req.(*GetXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_ListXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).ListXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/ListXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).ListXAttr(ctx, req.(*ListXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_SetXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).SetXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/SetXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).SetXAttr(ctx, req.(*SetXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_RemoveXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).RemoveXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/RemoveXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).RemoveXAttr(ctx, req.(*RemoveXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RawFileSystemServer).Read(m, &rawFileSystemReadServer{stream})
}

type RawFileSystem_ReadServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type rawFileSystemReadServer struct {
	grpc.ServerStream
}

func (x *rawFileSystemReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RawFileSystem_Lseek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LseekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Lseek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Lseek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Lseek(ctx, req.(*LseekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_GetLk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).GetLk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/GetLk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).GetLk(ctx, req.(*LkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_SetLk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).SetLk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/SetLk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).SetLk(ctx, req.(*LkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_SetLkw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).SetLkw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/SetLkw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).SetLkw(ctx, req.(*LkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_CopyFileRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).CopyFileRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/CopyFileRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).CopyFileRange(ctx, req.(*CopyFileRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Flush(ctx, req.(*FlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Fsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Fsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Fsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Fsync(ctx, req.(*FsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_Fallocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FallocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).Fallocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/Fallocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).Fallocate(ctx, req.(*FallocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_OpenDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).OpenDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/OpenDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).OpenDir(ctx, req.(*OpenDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_ReadDir_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadDirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RawFileSystemServer).ReadDir(m, &rawFileSystemReadDirServer{stream})
}

type RawFileSystem_ReadDirServer interface {
	Send(*ReadDirResponse) error
	grpc.ServerStream
}

type rawFileSystemReadDirServer struct {
	grpc.ServerStream
}

func (x *rawFileSystemReadDirServer) Send(m *ReadDirResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RawFileSystem_ReadDirPlus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadDirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RawFileSystemServer).ReadDirPlus(m, &rawFileSystemReadDirPlusServer{stream})
}

type RawFileSystem_ReadDirPlusServer interface {
	Send(*ReadDirResponse) error
	grpc.ServerStream
}

type rawFileSystemReadDirPlusServer struct {
	grpc.ServerStream
}

func (x *rawFileSystemReadDirPlusServer) Send(m *ReadDirResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RawFileSystem_ReleaseDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).ReleaseDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/ReleaseDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).ReleaseDir(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_FsyncDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).FsyncDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/FsyncDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).FsyncDir(ctx, req.(*FsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawFileSystem_StatFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawFileSystemServer).StatFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RawFileSystem/StatFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawFileSystemServer).StatFs(ctx, req.(*StatfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RawFileSystem_ServiceDesc is the grpc.ServiceDesc for RawFileSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RawFileSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RawFileSystem",
	HandlerType: (*RawFileSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "String",
			Handler:    _RawFileSystem_String_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _RawFileSystem_Lookup_Handler,
		},
		{
			MethodName: "Forget",
			Handler:    _RawFileSystem_Forget_Handler,
		},
		{
			MethodName: "GetAttr",
			Handler:    _RawFileSystem_GetAttr_Handler,
		},
		{
			MethodName: "SetAttr",
			Handler:    _RawFileSystem_SetAttr_Handler,
		},
		{
			MethodName: "Mknod",
			Handler:    _RawFileSystem_Mknod_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _RawFileSystem_Mkdir_Handler,
		},
		{
			MethodName: "Unlink",
			Handler:    _RawFileSystem_Unlink_Handler,
		},
		{
			MethodName: "Rmdir",
			Handler:    _RawFileSystem_Rmdir_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _RawFileSystem_Rename_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _RawFileSystem_Link_Handler,
		},
		{
			MethodName: "Symlink",
			Handler:    _RawFileSystem_Symlink_Handler,
		},
		{
			MethodName: "Readlink",
			Handler:    _RawFileSystem_Readlink_Handler,
		},
		{
			MethodName: "Access",
			Handler:    _RawFileSystem_Access_Handler,
		},
		{
			MethodName: "GetXAttr",
			Handler:    _RawFileSystem_GetXAttr_Handler,
		},
		{
			MethodName: "ListXAttr",
			Handler:    _RawFileSystem_ListXAttr_Handler,
		},
		{
			MethodName: "SetXAttr",
			Handler:    _RawFileSystem_SetXAttr_Handler,
		},
		{
			MethodName: "RemoveXAttr",
			Handler:    _RawFileSystem_RemoveXAttr_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RawFileSystem_Create_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _RawFileSystem_Open_Handler,
		},
		{
			MethodName: "Lseek",
			Handler:    _RawFileSystem_Lseek_Handler,
		},
		{
			MethodName: "GetLk",
			Handler:    _RawFileSystem_GetLk_Handler,
		},
		{
			MethodName: "SetLk",
			Handler:    _RawFileSystem_SetLk_Handler,
		},
		{
			MethodName: "SetLkw",
			Handler:    _RawFileSystem_SetLkw_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _RawFileSystem_Release_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _RawFileSystem_Write_Handler,
		},
		{
			MethodName: "CopyFileRange",
			Handler:    _RawFileSystem_CopyFileRange_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _RawFileSystem_Flush_Handler,
		},
		{
			MethodName: "Fsync",
			Handler:    _RawFileSystem_Fsync_Handler,
		},
		{
			MethodName: "Fallocate",
			Handler:    _RawFileSystem_Fallocate_Handler,
		},
		{
			MethodName: "OpenDir",
			Handler:    _RawFileSystem_OpenDir_Handler,
		},
		{
			MethodName: "ReleaseDir",
			Handler:    _RawFileSystem_ReleaseDir_Handler,
		},
		{
			MethodName: "FsyncDir",
			Handler:    _RawFileSystem_FsyncDir_Handler,
		},
		{
			MethodName: "StatFs",
			Handler:    _RawFileSystem_StatFs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _RawFileSystem_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadDir",
			Handler:       _RawFileSystem_ReadDir_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadDirPlus",
			Handler:       _RawFileSystem_ReadDirPlus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "raw_file_system.proto",
}
